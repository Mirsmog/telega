---
description:
globs:
alwaysApply: true
---

# ESLint Rules и Стандарты для NestJS проекта

## Обязательные конвенции именования

### Классы

- **Controllers**: `{Name}Controller` (например: `UsersController`)
- **Services**: `{Name}Service` (например: `UsersService`)
- **Modules**: `{Name}Module` (например: `UsersModule`)
- **Guards**: `{Name}Guard` (например: `JwtAuthGuard`)
- **Interceptors**: `{Name}Interceptor` (например: `LoggingInterceptor`)
- **Filters**: `{Name}Filter` (например: `HttpExceptionFilter`)
- **Pipes**: `{Name}Pipe` (например: `ValidationPipe`)
- **Strategies**: `{Name}Strategy` (например: `JwtStrategy`)
- **DTOs**: `{Action}{Entity}Dto` (например: `CreateUserDto`, `UpdateUserDto`)
- **Entities**: `{Name}Entity` или `{Name}` (например: `UserEntity`, `User`)
- **Interfaces**: `{Name}Interface` или `{Name}` (например: `UserInterface`, `User`)

### Файлы и папки

- Файлы: `kebab-case` (например: `user-profile.dto.ts`)
- Папки: `kebab-case` (например: `file-upload/`)
- Константы файлов: `{name}.{type}.ts` (например: `user.controller.ts`)

### Методы контроллеров

- GET: `findAll()`, `findOne()`, `findBy{Criteria}()`
- POST: `create()`, `add{Entity}()`
- PUT/PATCH: `update()`, `updateBy{Criteria}()`
- DELETE: `remove()`, `delete()`, `removeBy{Criteria}()`

## Структура файлов

### Controller пример:

```typescript
@Controller("users")
@UseGuards(JwtAuthGuard)
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Get()
  async findAll(@Query() query: FindUsersDto): Promise<User[]> {
    return this.usersService.findAll(query);
  }

  @Post()
  async create(@Body() createUserDto: CreateUserDto): Promise<User> {
    return this.usersService.create(createUserDto);
  }
}
```

### Service пример:

```typescript
@Injectable()
export class UsersService {
  constructor(private readonly prisma: PrismaService) {}

  async findAll(query: FindUsersDto): Promise<User[]> {
    return this.prisma.user.findMany({
      where: this.buildWhereClause(query),
      include: { profile: true },
    });
  }

  private buildWhereClause(query: FindUsersDto): Prisma.UserWhereInput {
    // Приватные методы для внутренней логики
  }
}
```

### Module пример:

```typescript
@Module({
  imports: [PrismaModule],
  controllers: [UsersController],
  providers: [UsersService],
  exports: [UsersService],
})
export class UsersModule {}
```

## Обязательные декораторы и аннотации

### API Documentation (Swagger)

```typescript
@ApiTags("users")
@Controller("users")
export class UsersController {
  @ApiOperation({ summary: "Get all users" })
  @ApiResponse({ status: 200, description: "Users retrieved successfully" })
  @ApiResponse({ status: 401, description: "Unauthorized" })
  @Get()
  async findAll(): Promise<User[]> {
    // ...
  }
}
```

### DTO с валидацией

```typescript
export class CreateUserDto {
  @ApiProperty({ description: "User email", example: "user@example.com" })
  @IsEmail()
  @IsNotEmpty()
  email: string;

  @ApiProperty({ description: "User name", example: "John Doe" })
  @IsString()
  @MinLength(2)
  @MaxLength(50)
  name: string;
}
```

## Правила организации импортов

### Порядок импортов:

1. Node.js модули
2. Сторонние библиотеки
3. NestJS модули
4. Локальные модули (относительные пути)

```typescript
import { readFileSync } from "fs";
import { join } from "path";

import { ValidationPipe } from "@nestjs/common";
import { NestFactory } from "@nestjs/core";

import { AppModule } from "./app.module";
import { PrismaService } from "./prisma/prisma.service";
```

## Обработка ошибок

### В контроллерах:

```typescript
@Get(':id')
async findOne(@Param('id') id: string): Promise<User> {
  const user = await this.usersService.findOne(+id);
  if (!user) {
    throw new NotFoundException(`User with ID ${id} not found`);
  }
  return user;
}
```

### В сервисах:

```typescript
async create(createUserDto: CreateUserDto): Promise<User> {
  try {
    return await this.prisma.user.create({
      data: createUserDto,
    });
  } catch (error) {
    if (error.code === 'P2002') {
      throw new ConflictException('User with this email already exists');
    }
    throw new InternalServerErrorException('Failed to create user');
  }
}
```

## Логирование

```typescript
@Injectable()
export class UsersService {
  private readonly logger = new Logger(UsersService.name);

  async create(createUserDto: CreateUserDto): Promise<User> {
    this.logger.log(`Creating user with email: ${createUserDto.email}`);

    try {
      const user = await this.prisma.user.create({ data: createUserDto });
      this.logger.log(`User created successfully with ID: ${user.id}`);
      return user;
    } catch (error) {
      this.logger.error(`Failed to create user: ${error.message}`, error.stack);
      throw error;
    }
  }
}
```

## Async/Await и Promise правила

1. **Всегда используйте async/await** вместо .then()/.catch()
2. **Обрабатывайте все Promise** (no-floating-promises)
3. **Типизируйте возвращаемые Promise**

```typescript
// ✅ Правильно
async findUser(id: number): Promise<User | null> {
  return await this.prisma.user.findUnique({ where: { id } });
}

// ❌ Неправильно
findUser(id: number) {
  return this.prisma.user.findUnique({ where: { id } });
}
```

## Dependency Injection

```typescript
@Injectable()
export class UsersService {
  constructor(
    private readonly prisma: PrismaService,
    private readonly configService: ConfigService,
    private readonly logger: Logger
  ) {}
}
```

## Environment Configuration

```typescript
@Injectable()
export class AppConfigService {
  constructor(private configService: ConfigService) {}

  get port(): number {
    return this.configService.get<number>("PORT", 3000);
  }

  get databaseUrl(): string {
    return this.configService.get<string>("DATABASE_URL");
  }
}
```

## Тестирование

### Unit тесты:

```typescript
describe("UsersService", () => {
  let service: UsersService;
  let prisma: PrismaService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [UsersService, PrismaService],
    }).compile();

    service = module.get<UsersService>(UsersService);
    prisma = module.get<PrismaService>(PrismaService);
  });

  it("should create a user", async () => {
    const createUserDto: CreateUserDto = {
      email: "test@example.com",
      name: "Test User",
    };

    const expectedUser = { id: 1, ...createUserDto };
    jest.spyOn(prisma.user, "create").mockResolvedValue(expectedUser);

    const result = await service.create(createUserDto);
    expect(result).toEqual(expectedUser);
  });
});
```

Эти правила помогут ИИ писать единообразный, качественный код в соответствии с лучшими практиками NestJS.
