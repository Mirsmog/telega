// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== ENUMS ====================

enum RoleType {
  CUSTOMER
  EXECUTOR
  ADMIN
}

enum OrderType {
  A_TO_B // Перевозка A→B
  PLACE // Работа в месте
  PEOPLE // Перевозка людей
}

enum OrderStatus {
  DRAFT // Черновик
  PENDING // Ожидает модерации
  ACTIVE // Активен (опубликован)
  IN_PROGRESS // В работе
  COMPLETED // Завершен
  CANCELLED // Отменен
  REJECTED // Отклонен модерацией
}

enum PaymentStatus {
  PENDING // Ожидает оплаты
  PROCESSING // В обработке
  PAID // Оплачено
  FAILED // Ошибка оплаты
  REFUNDED // Возвращено
}

enum TariffType {
  ONE_TIME // Разовый
  OPTIMAL // Оптимальный
}

enum AdminActionType {
  USER_BAN
  USER_UNBAN
  ORDER_APPROVE
  ORDER_REJECT
  PAYMENT_REFUND
  BROADCAST_SEND
  CONFIG_UPDATE
}

enum BroadcastStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  FAILED
}

enum BroadcastTarget {
  ALL_USERS
  CUSTOMERS
  EXECUTORS
  BY_REGION
}

// ==================== MODELS ====================

model User {
  id         String   @id @default(cuid())
  telegramId BigInt   @unique
  username   String?
  firstName  String
  lastName   String?
  phone      String?
  role       RoleType @default(CUSTOMER)

  // Балансы
  balance       Decimal @default(0) @db.Decimal(10, 2)
  frozenBalance Decimal @default(0) @db.Decimal(10, 2)

  // Реферальная система
  referralCode  String? @unique
  referredBy    String?
  referredUsers User[]  @relation("UserReferrals")
  referrer      User?   @relation("UserReferrals", fields: [referredBy], references: [id])

  // Транспорт исполнителя
  vehicles UserVehicle[]

  // Активность
  isActive Boolean   @default(true)
  isBanned Boolean   @default(false)
  lastSeen DateTime?

  // Даты
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  ordersAsCustomer Order[]         @relation("CustomerOrders")
  ordersAsExecutor Order[]         @relation("ExecutorOrders")
  orderResponses   OrderResponse[]
  payments         Payment[]
  sessions         Session[]
  notifications    Notification[]
  userRegions      UserRegion[]
  adminActions     AdminAction[]
  broadcasts       Broadcast[]

  @@map("users")
}

model Region {
  id   String @id @default(cuid())
  name String @unique
  code String @unique // Например, "MSK", "SPB"

  // Тарифы для исполнителей
  oneTimeTariff Decimal @db.Decimal(10, 2) // Разовый тариф
  optimalTariff Decimal @db.Decimal(10, 2) // Оптимальный тариф

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  orders      Order[]
  userRegions UserRegion[]
  broadcasts  Broadcast[]

  @@map("regions")
}

model UserRegion {
  id         String     @id @default(cuid())
  userId     String
  regionId   String
  tariffType TariffType
  paidUntil  DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  region Region @relation(fields: [regionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, regionId])
  @@map("user_regions")
}

model VehicleCategory {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  vehicleTypes VehicleType[]

  @@map("vehicle_categories")
}

model VehicleType {
  id          String  @id @default(cuid())
  categoryId  String
  name        String
  description String?
  isActive    Boolean @default(true)

  category VehicleCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  vehicleSubtypes VehicleSubtype[]

  @@unique([categoryId, name])
  @@map("vehicle_types")
}

model VehicleSubtype {
  id          String  @id @default(cuid())
  typeId      String
  name        String
  description String?
  isActive    Boolean @default(true)

  type VehicleType @relation(fields: [typeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  userVehicles UserVehicle[]
  orders       Order[]

  @@unique([typeId, name])
  @@map("vehicle_subtypes")
}

model UserVehicle {
  id        String @id @default(cuid())
  userId    String
  subtypeId String

  // Характеристики
  brand        String?
  model        String?
  year         Int?
  licensePlate String?

  // Грузоподъемность
  loadCapacity   Decimal? @db.Decimal(8, 2)
  volumeCapacity Decimal? @db.Decimal(8, 2)

  // Дополнительные возможности
  hasRefrigerator Boolean @default(false)
  hasLifting      Boolean @default(false)
  canCarryFragile Boolean @default(false)

  isActive Boolean @default(true)

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  subtype VehicleSubtype @relation(fields: [subtypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, subtypeId])
  @@map("user_vehicles")
}

model Order {
  id               String  @id @default(cuid())
  customerId       String
  executorId       String?
  regionId         String
  vehicleSubtypeId String?

  // Основная информация
  type        OrderType
  title       String
  description String

  // Адреса и локация
  fromAddress   String?
  toAddress     String?
  workAddress   String? // Для типа PLACE
  fromLatitude  Decimal? @db.Decimal(10, 8)
  fromLongitude Decimal? @db.Decimal(11, 8)
  toLatitude    Decimal? @db.Decimal(10, 8)
  toLongitude   Decimal? @db.Decimal(11, 8)

  // Время
  scheduledDate DateTime?
  scheduledTime String? // HH:MM формат
  deadlineDate  DateTime?

  // Финансовые условия
  budget       Decimal? @db.Decimal(10, 2)
  isFixedPrice Boolean  @default(false)

  // Требования к грузу/работе
  cargoWeight       Decimal? @db.Decimal(8, 2)
  cargoVolume       Decimal? @db.Decimal(8, 2)
  needsRefrigerator Boolean  @default(false)
  needsLifting      Boolean  @default(false)
  isFragile         Boolean  @default(false)

  // Количество людей (для типа PEOPLE)
  peopleCount Int?

  // Статус и модерация
  status            OrderStatus @default(DRAFT)
  moderationComment String?

  // Контактная информация
  contactPhone String?
  contactName  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  customer       User            @relation("CustomerOrders", fields: [customerId], references: [id])
  executor       User?           @relation("ExecutorOrders", fields: [executorId], references: [id])
  region         Region          @relation(fields: [regionId], references: [id])
  vehicleSubtype VehicleSubtype? @relation(fields: [vehicleSubtypeId], references: [id])
  responses      OrderResponse[]

  @@map("orders")
}

model OrderResponse {
  id         String @id @default(cuid())
  orderId    String
  executorId String

  // Предложение исполнителя
  proposedPrice Decimal? @db.Decimal(10, 2)
  comment       String?

  // Статус отклика
  isAccepted Boolean? // null - ожидает, true - принят, false - отклонен

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  order    Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  executor User  @relation(fields: [executorId], references: [id], onDelete: Cascade)

  @@unique([orderId, executorId])
  @@map("order_responses")
}

model Payment {
  id     String @id @default(cuid())
  userId String

  // Tinkoff данные
  tinkoffPaymentId String? @unique
  tinkoffStatus    String?

  // Сумма и назначение
  amount      Decimal @db.Decimal(10, 2)
  description String

  // Статус платежа
  status PaymentStatus @default(PENDING)

  // Метаданные
  metadata Json? // Дополнительные данные для Tinkoff

  // Даты
  paidAt    DateTime?
  expiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  user User @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Session {
  id     String @id @default(cuid())
  userId String

  // Telegram Bot данные
  chatId  BigInt
  state   String? // Текущее состояние диалога
  context Json? // Контекст сессии

  // Время активности
  lastActivity DateTime @default(now())
  expiresAt    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
  @@map("sessions")
}

model Notification {
  id     String @id @default(cuid())
  userId String

  // Содержание
  title   String
  message String
  type    String // Тип уведомления

  // Статус
  isRead Boolean @default(false)
  isSent Boolean @default(false)

  // Планирование
  scheduledFor DateTime?
  sentAt       DateTime?

  // Метаданные
  metadata Json? // Дополнительные данные

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AdminAction {
  id      String @id @default(cuid())
  adminId String

  // Тип действия
  type       AdminActionType
  targetId   String? // ID целевого объекта
  targetType String? // Тип целевого объекта

  // Описание
  description String
  comment     String?

  // Метаданные
  metadata Json? // Дополнительные данные о действии

  // IP и User Agent
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())

  // Связи
  admin User @relation(fields: [adminId], references: [id])

  @@map("admin_actions")
}

model Broadcast {
  id      String @id @default(cuid())
  adminId String

  // Содержание
  title    String
  message  String
  imageUrl String?

  // Настройки рассылки
  target         BroadcastTarget
  targetRegionId String? // Для target BY_REGION

  // Статус
  status BroadcastStatus @default(DRAFT)

  // Планирование
  scheduledFor DateTime?

  // Статистика
  totalRecipients Int @default(0)
  sentCount       Int @default(0)
  deliveredCount  Int @default(0)
  failedCount     Int @default(0)

  // Ошибки
  errorMessage String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  admin        User    @relation(fields: [adminId], references: [id])
  targetRegion Region? @relation(fields: [targetRegionId], references: [id])

  @@map("broadcasts")
}

model Config {
  id          String  @id @default(cuid())
  key         String  @unique
  value       String
  description String?

  // Метаданные
  isSystem    Boolean @default(false)
  isEncrypted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("configs")
}
