// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model (unified Customer + Performer)
model User {
  id        Int     @id @default(autoincrement())
  userId    BigInt  @unique @map("user_id") // Telegram user_id
  username  String?
  firstName String  @map("first_name")
  lastName  String? @map("last_name")
  phone     String?

  // Role management
  roles UserRole[]

  // Financial data
  customerBalance  Decimal @default(0) @map("customer_balance") @db.Decimal(10, 2)
  performerBalance Decimal @default(0) @map("performer_balance") @db.Decimal(10, 2)

  // Referral system
  refCode       String? @unique @map("ref_code")
  parentRefCode String? @map("parent_ref_code")
  refBalance    Decimal @default(0) @map("ref_balance") @db.Decimal(10, 2)

  // User settings
  mainLimit    Int @default(2) @map("main_limit")
  settingLimit Int @default(2) @map("setting_limit")

  // Metadata
  rating          Int @default(0)
  totalOrders     Int @default(0) @map("total_orders")
  completedOrders Int @default(0) @map("completed_orders")
  cancelledOrders Int @default(0) @map("cancelled_orders")

  // Status
  isActive  Boolean @default(true) @map("is_active")
  isBlocked Boolean @default(false) @map("is_blocked")

  // Timestamps
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  blockedAt DateTime? @map("blocked_at")
  lastSeen  DateTime? @map("last_seen")

  // Relations
  createdOrders   Order[]        @relation("CustomerOrders")
  performedOrders Order[]        @relation("PerformerOrders")
  payments        Payment[]
  vehicles        Vehicle[]
  userRegions     UserRegion[]
  sessions        UserSession[]
  notifications   Notification[]

  // Self-referential relation for referrals
  referrals User[] @relation("Referrals")
  referrer  User?  @relation("Referrals", fields: [parentRefCode], references: [refCode])

  @@map("users")
}

// User roles enum
enum RoleType {
  CUSTOMER
  PERFORMER
  ADMIN
}

// User roles junction table
model UserRole {
  id     Int      @id @default(autoincrement())
  userId Int      @map("user_id")
  role   RoleType

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
  @@map("user_roles")
}

// Order types
enum OrderType {
  A_TO_B // Перевозка из точки А в Б
  PLACE // Работа по месту
  PEOPLE // Перевозка пассажиров
}

// Order status
enum OrderStatus {
  CREATED // Создан
  WAITING // На модерации
  SEARCHING // Поиск исполнителя
  ASSIGNED // Назначен исполнитель
  IN_PROGRESS // В работе
  COMPLETED // Завершен
  CANCELLED // Отменен
}

// Orders model
model Order {
  id          Int    @id @default(autoincrement())
  orderNumber String @unique @map("order_number")

  // Order details
  type   OrderType
  status OrderStatus @default(CREATED)

  // Participants
  customerId  Int  @map("customer_id")
  performerId Int? @map("performer_id")

  // Vehicle requirements
  vehicleType    String? @map("vehicle_type")
  vehicleSubtype String? @map("vehicle_subtype")
  vehicleAmount  Int?    @map("vehicle_amount")

  // Location details
  regionCode    String  @map("region_code")
  subregionCode String? @map("subregion_code")
  address       String
  dropAddress   String? @map("drop_address")

  // Order specific data
  distance       Int? // в км (for A_TO_B)
  passengerCount Int?    @map("passenger_count") // for PEOPLE
  cargoInfo      String? @map("cargo_info")
  requirements   String?

  // Financial
  price        Decimal? @db.Decimal(10, 2)
  performerFee Decimal? @map("performer_fee") @db.Decimal(10, 2)

  // Scheduling
  scheduledDate DateTime? @map("scheduled_date")
  scheduledTime String?   @map("scheduled_time")

  // Timestamps
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  completedAt DateTime? @map("completed_at")

  // Relations
  customer  User           @relation("CustomerOrders", fields: [customerId], references: [id])
  performer User?          @relation("PerformerOrders", fields: [performerId], references: [id])
  region    Region         @relation(fields: [regionCode], references: [code])
  payments  Payment[]
  history   OrderHistory[]

  @@map("orders")
}

// Order history for tracking status changes
model OrderHistory {
  id        Int         @id @default(autoincrement())
  orderId   Int         @map("order_id")
  status    OrderStatus
  comment   String?
  changedBy Int?        @map("changed_by")
  createdAt DateTime    @default(now()) @map("created_at")

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_history")
}

// Regions model
model Region {
  id   Int    @id @default(autoincrement())
  code String @unique
  name String

  // Hierarchy
  parentCode String? @map("parent_code")
  level      Int     @default(1) // 1 = region, 2 = subregion

  // Pricing
  customerTariff  Decimal @default(70) @map("customer_tariff") @db.Decimal(10, 2)
  performerTariff Decimal @default(200) @map("performer_tariff") @db.Decimal(10, 2)
  optimalTariff   Decimal @default(150) @map("optimal_tariff") @db.Decimal(10, 2)

  // Status
  isActive Boolean @default(true) @map("is_active")

  // Relations
  parent      Region?      @relation("RegionHierarchy", fields: [parentCode], references: [code])
  children    Region[]     @relation("RegionHierarchy")
  orders      Order[]
  userRegions UserRegion[]

  @@map("regions")
}

// User-Region relationship (which regions user works in)
model UserRegion {
  id         Int     @id @default(autoincrement())
  userId     Int     @map("user_id")
  regionCode String  @map("region_code")
  isActive   Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  region Region @relation(fields: [regionCode], references: [code])

  @@unique([userId, regionCode])
  @@map("user_regions")
}

// Vehicle categories
model VehicleCategory {
  id          Int     @id @default(autoincrement())
  code        String  @unique
  name        String
  description String?

  // Relations
  types Vehicle[]

  @@map("vehicle_categories")
}

// User vehicles
model Vehicle {
  id     Int @id @default(autoincrement())
  userId Int @map("user_id")

  // Vehicle details
  categoryCode String  @map("category_code")
  type         String
  subtype      String?
  brand        String?
  model        String?
  licensePlate String? @map("license_plate")

  // Capacity
  maxWeight     Int? @map("max_weight") // kg
  maxVolume     Int? @map("max_volume") // liters
  maxPassengers Int? @map("max_passengers")

  // Status
  isActive Boolean @default(true) @map("is_active")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category VehicleCategory @relation(fields: [categoryCode], references: [code])

  @@map("vehicles")
}

// Payment statuses
enum PaymentStatus {
  CREATED
  PENDING
  CONFIRMED
  CANCELLED
  FAILED
}

// Payments model
model Payment {
  id        Int    @id @default(autoincrement())
  paymentId String @unique @map("payment_id") // Tinkoff PaymentId

  // Payment details
  userId  Int           @map("user_id")
  orderId Int?          @map("order_id")
  amount  Decimal       @db.Decimal(10, 2)
  status  PaymentStatus @default(CREATED)

  // Tinkoff specific
  terminalKey String? @map("terminal_key")
  paymentURL  String? @map("payment_url")

  // Metadata
  description String?
  metadata    Json?   @db.JsonB

  // Timestamps
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  paidAt    DateTime? @map("paid_at")

  // Relations
  user  User   @relation(fields: [userId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])

  @@map("payments")
}

// User sessions for authentication and FSM state management
model UserSession {
  id        Int    @id @default(autoincrement())
  userId    Int    @map("user_id")
  sessionId String @unique @map("session_id")

  // Authentication data
  refreshToken String? @map("refresh_token")
  deviceInfo   String? @map("device_info")
  ipAddress    String? @map("ip_address")
  userAgent    String? @map("user_agent")

  // Session data (FSM)
  currentState String? @map("current_state")
  context      Json?   @db.JsonB
  clientType   String? @map("client_type") // 'bot' | 'miniapp'

  // Timestamps
  createdAt    DateTime @default(now()) @map("created_at")
  lastActivity DateTime @default(now()) @map("last_activity")
  expiresAt    DateTime @map("expires_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Notifications model
model Notification {
  id     Int @id @default(autoincrement())
  userId Int @map("user_id")

  // Notification content
  type    String
  title   String
  message String
  data    Json?  @db.JsonB

  // Status
  isRead Boolean @default(false) @map("is_read")
  isSent Boolean @default(false) @map("is_sent")

  // Priority
  priority String @default("normal") // 'high' | 'normal' | 'low'

  // Timestamps
  createdAt DateTime  @default(now()) @map("created_at")
  readAt    DateTime? @map("read_at")
  sentAt    DateTime? @map("sent_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// System settings
model SystemSetting {
  id          Int     @id @default(autoincrement())
  key         String  @unique
  value       String
  description String?

  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("system_settings")
}
