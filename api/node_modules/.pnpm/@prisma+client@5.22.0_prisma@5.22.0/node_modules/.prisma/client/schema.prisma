// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== ENUMS ====================

enum RoleType {
  CUSTOMER
  EXECUTOR
  ADMIN
}

enum OrderType {
  A_TO_B // Перевозка A→B
  PLACE // Работа в месте
  PEOPLE // Перевозка людей
}

enum OrderStatus {
  DRAFT // Черновик
  PENDING // Ожидает модерации
  ACTIVE // Активен (опубликован)
  IN_PROGRESS // В работе
  COMPLETED // Завершен
  CANCELLED // Отменен
  REJECTED // Отклонен модерацией
}

enum PaymentStatus {
  PENDING // Ожидает оплаты
  PROCESSING // В обработке
  PAID // Оплачено
  FAILED // Ошибка оплаты
  REFUNDED // Возвращено
}

enum TariffType {
  ONE_TIME // Разовый
  OPTIMAL // Оптимальный
}

enum AdminActionType {
  USER_BAN
  USER_UNBAN
  ORDER_APPROVE
  ORDER_REJECT
  PAYMENT_REFUND
  BROADCAST_SEND
  CONFIG_UPDATE
}

enum BroadcastStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  FAILED
}

enum BroadcastTarget {
  ALL_USERS
  CUSTOMERS
  EXECUTORS
  BY_REGION
}

enum ClientType {
  TELEGRAM_BOT // Telegram Bot
  TELEGRAM_WEB_APP // Telegram Mini App
  WEB_BROWSER // Веб-браузер (будущее)
  MOBILE_APP // Мобильное приложение (будущее)
}

enum SessionStatus {
  ACTIVE
  EXPIRED
  TERMINATED
}

// ==================== MODELS ====================

model User {
  id         String   @id @default(cuid())
  telegramId BigInt   @unique
  username   String?
  firstName  String
  lastName   String?
  phone      String?
  email      String? // Для будущих клиентов
  role       RoleType @default(CUSTOMER)

  // Финансы и лимиты (КРИТИЧНО для бизнес-логики)
  balance       Decimal @default(0) @db.Decimal(10, 2)
  frozenBalance Decimal @default(0) @db.Decimal(10, 2)
  totalEarned   Decimal @default(0) @db.Decimal(10, 2)
  orderLimit    Int     @default(2) // Лимит активных заказов
  createLimit   Int     @default(2) // Лимит создания заказов

  // Статистика и репутация (ВАЖНО для доверия)
  completedOrders Int     @default(0) // Завершенные заказы
  cancelledOrders Int     @default(0) // Отмененные заказы  
  averageRating   Decimal @default(0) @db.Decimal(3, 2) // Средний рейтинг
  totalReviews    Int     @default(0) // Количество отзывов

  // Подписка и доступ (МОНЕТИЗАЦИЯ)
  hasActivePlan Boolean   @default(false) // Активный план для исполнителей
  planExpiresAt DateTime? // Дата окончания плана

  // Реферальная система
  referralCode  String? @unique
  referredById  String?
  referredUsers User[]  @relation("UserReferrals")
  referrer      User?   @relation("UserReferrals", fields: [referredById], references: [id])

  // Транспорт исполнителя
  vehicles UserVehicle[]

  // Системные поля
  isActive   Boolean   @default(true)
  isBanned   Boolean   @default(false)
  banReason  String? // Причина блокировки
  lastSeenAt DateTime?

  // Настройки уведомлений
  notificationsEnabled Boolean @default(true)
  emailNotifications   Boolean @default(false)

  // Аудит и логирование (КРИТИЧНО для отслеживания)
  activityLog Json @default("[]") // История действий [{message, timestamp, action}]

  // Даты
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  ordersAsCustomer    Order[]              @relation("CustomerOrders")
  ordersAsExecutor    Order[]              @relation("ExecutorOrders")
  orderResponses      OrderResponse[]
  payments            Payment[]
  sessions            Session[]
  notifications       Notification[]
  userRegions         UserRegion[]
  adminActions        AdminAction[]
  broadcasts          Broadcast[]
  paymentTransactions PaymentTransaction[]

  @@map("users")
}

model Region {
  id         String @id @default(cuid())
  name       String @unique
  code       String @unique // Например, "MSK", "SPB"
  regionCode String @unique // "01", "02" - КРИТИЧНО для матчинга!

  // Подрегионы (ВАЖНО для точного матчинга)
  subRegions Json @default("[]") // Список подрегионов ["Центр", "Север", ...]

  // Координаты региона (для карт в Mini App)
  centerLatitude  Decimal? @db.Decimal(10, 8)
  centerLongitude Decimal? @db.Decimal(11, 8)

  // Тарифы для исполнителей
  oneTimePlanPrice Decimal @db.Decimal(10, 2) // Разовый план
  monthlyPlanPrice Decimal @db.Decimal(10, 2) // Месячный план

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  orders      Order[]
  userRegions UserRegion[]
  broadcasts  Broadcast[]

  @@map("regions")
}

model UserRegion {
  id         String @id @default(cuid())
  userId     String
  regionId   String
  regionCode String // Дублируем для быстрого поиска

  // Активные подрегионы для исполнителя (КРИТИЧНО для матчинга)
  activeSubRegions Json @default("[]") // Активные подрегионы ["Центр", "Север"]

  planType  TariffType
  paidUntil DateTime?
  isActive  Boolean    @default(true)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  region Region @relation(fields: [regionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, regionId])
  @@map("user_regions")
}

model VehicleCategory {
  id          String  @id @default(cuid())
  name        String  @unique
  displayName String // Название для отображения в UI
  description String?
  iconUrl     String? // Иконка для Mini App
  sortOrder   Int     @default(0)
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  vehicleTypes VehicleType[]

  @@map("vehicle_categories")
}

model VehicleType {
  id          String  @id @default(cuid())
  categoryId  String
  name        String
  displayName String // Название для отображения в UI
  description String?
  iconUrl     String? // Иконка для Mini App
  sortOrder   Int     @default(0)
  isActive    Boolean @default(true)

  category VehicleCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  vehicleSubtypes VehicleSubtype[]

  @@unique([categoryId, name])
  @@map("vehicle_types")
}

model VehicleSubtype {
  id          String  @id @default(cuid())
  typeId      String
  name        String
  displayName String // Название для отображения в UI
  description String?
  iconUrl     String? // Иконка для Mini App
  sortOrder   Int     @default(0)
  isActive    Boolean @default(true)

  type VehicleType @relation(fields: [typeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  userVehicles UserVehicle[]
  orders       Order[]

  @@unique([typeId, name])
  @@map("vehicle_subtypes")
}

model UserVehicle {
  id        String @id @default(cuid())
  userId    String
  subtypeId String

  // Характеристики
  brand        String?
  model        String?
  year         Int?
  licensePlate String?
  color        String?

  // Грузоподъемность
  loadCapacity   Decimal? @db.Decimal(8, 2) // тонны
  volumeCapacity Decimal? @db.Decimal(8, 2) // м³

  // Дополнительные возможности
  hasRefrigerator Boolean @default(false)
  hasLifting      Boolean @default(false)
  canCarryFragile Boolean @default(false)

  // Фото и документы (для Mini App)
  photos    Json @default("[]") // Массив URL фотографий
  documents Json @default("[]") // Документы на транспорт

  isActive   Boolean @default(true)
  isVerified Boolean @default(false) // Проверен администратором

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  subtype VehicleSubtype @relation(fields: [subtypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, subtypeId])
  @@map("user_vehicles")
}

model Order {
  id               String  @id @default(cuid())
  orderNumber      String  @unique // КРИТИЧНО! Номер заказа для UI
  customerId       String
  executorId       String?
  regionId         String
  vehicleSubtypeId String?

  // Основная информация
  type        OrderType
  title       String
  description String

  // Адреса и локация
  pickupAddress     String? // Адрес подачи
  deliveryAddress   String? // Адрес доставки  
  workAddress       String? // Адрес работы (для типа PLACE)
  pickupLatitude    Decimal? @db.Decimal(10, 8)
  pickupLongitude   Decimal? @db.Decimal(11, 8)
  deliveryLatitude  Decimal? @db.Decimal(10, 8)
  deliveryLongitude Decimal? @db.Decimal(11, 8)

  // Региональная привязка (КРИТИЧНО для матчинга!)
  regionCode String // Код региона для быстрого поиска
  subRegion  String? // Подрегион для точного матчинга

  // Время
  scheduledDate DateTime?
  scheduledTime String? // HH:MM формат
  deadlineDate  DateTime?
  isUrgent      Boolean   @default(false)

  // Финансовые условия (УЛУЧШЕНО)
  budgetFrom    Decimal? @db.Decimal(10, 2) // Бюджет от
  budgetTo      Decimal? @db.Decimal(10, 2) // Бюджет до  
  proposedPrice Decimal? @db.Decimal(10, 2) // Предложенная цена исполнителем
  agreedPrice   Decimal? @db.Decimal(10, 2) // Согласованная цена
  isPriceFixed  Boolean  @default(false) // Фиксированная цена

  // Требования к грузу/работе
  cargoWeight       Decimal? @db.Decimal(8, 2)
  cargoVolume       Decimal? @db.Decimal(8, 2)
  cargoDescription  String? // Что везем - ВАЖНО для исполнителей
  estimatedDistance Decimal? @db.Decimal(8, 2) // КРИТИЧНО для расчета стоимости
  needsRefrigerator Boolean  @default(false)
  needsLifting      Boolean  @default(false)
  isFragile         Boolean  @default(false)

  // Количество людей (для типа PEOPLE)
  passengerCount Int?

  // Требования и комментарии (ВАЖНО)
  requirements    String? // Требования к перевозке
  customerComment String? // Комментарий заказчика
  executorComment String? // Комментарий исполнителя

  // Статус и модерация
  status            OrderStatus @default(DRAFT)
  moderationComment String?
  moderatedAt       DateTime?
  moderatedById     String?

  // Логика рассылки (КРИТИЧНО для бизнес-процессов)
  isSentToExecutors Boolean @default(false) // Отправлен исполнителям
  sentToAllRegions  Boolean @default(false) // Массовая рассылка
  viewsCount        Int     @default(0) // Количество просмотров
  responsesCount    Int     @default(0) // Количество откликов

  // Контактная информация
  contactPhone String?
  contactName  String?

  // Фото и файлы (для Mini App)
  photos    Json @default("[]") // Фотографии груза
  documents Json @default("[]") // Документы

  // Аудит и история (КРИТИЧНО для отслеживания)
  activityLog Json @default("[]") // История изменений

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  customer       User            @relation("CustomerOrders", fields: [customerId], references: [id])
  executor       User?           @relation("ExecutorOrders", fields: [executorId], references: [id])
  region         Region          @relation(fields: [regionId], references: [id])
  vehicleSubtype VehicleSubtype? @relation(fields: [vehicleSubtypeId], references: [id])
  responses      OrderResponse[]

  @@map("orders")
}

model OrderResponse {
  id         String @id @default(cuid())
  orderId    String
  executorId String

  // Предложение исполнителя
  proposedPrice     Decimal? @db.Decimal(10, 2)
  comment           String?
  estimatedDuration String? // Предполагаемое время выполнения

  // Статус отклика
  status String @default("PENDING") // PENDING, ACCEPTED, REJECTED

  // Фото транспорта (для Mini App)
  vehiclePhotos Json @default("[]")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  order    Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  executor User  @relation(fields: [executorId], references: [id], onDelete: Cascade)

  @@unique([orderId, executorId])
  @@map("order_responses")
}

model Payment {
  id     String @id @default(cuid())
  userId String

  // Tinkoff данные
  tinkoffPaymentId String? @unique
  tinkoffStatus    String?

  // Сумма и назначение
  amount      Decimal @db.Decimal(10, 2)
  description String

  // Статус платежа
  status PaymentStatus @default(PENDING)

  // Метаданные
  metadata Json? // Дополнительные данные для Tinkoff

  // Даты
  paidAt    DateTime?
  expiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  user User @relation(fields: [userId], references: [id])

  @@map("payments")
}

// Детальная информация о платежных операциях
model PaymentTransaction {
  id      String  @id @default(cuid())
  userId  String
  orderId String?

  // Детали операции
  type        String // TOP_UP, WITHDRAWAL, ORDER_PAYMENT, PLAN_PAYMENT
  amount      Decimal @db.Decimal(10, 2)
  description String
  status      String // PENDING, COMPLETED, FAILED

  // Платежная система
  paymentMethod String? // TINKOFF, CARD, BALANCE
  externalId    String? // ID в внешней системе

  // Метаданные
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи  
  user User @relation(fields: [userId], references: [id])

  @@map("payment_transactions")
}

model Session {
  id     String @id @default(cuid())
  userId String

  // Информация о клиенте
  clientType     ClientType // Тип клиента
  chatId         BigInt? // Для Telegram Bot
  webAppInitData String? // Для Telegram Mini App
  userAgent      String? // User Agent браузера
  ipAddress      String? // IP адрес

  // Состояние сессии
  currentState String? // Текущее состояние диалога (для бота)
  contextData  Json? // Контекст сессии

  // Время активности
  lastActivity DateTime      @default(now())
  expiresAt    DateTime
  status       SessionStatus @default(ACTIVE)

  // Устройство и локация
  deviceInfo Json? // Информация об устройстве
  timezone   String? // Часовой пояс пользователя
  language   String? // Язык интерфейса

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Notification {
  id     String @id @default(cuid())
  userId String

  // Содержание
  title   String
  message String
  type    String // ORDER_UPDATE, PAYMENT, SYSTEM, PROMO

  // Каналы доставки
  sendToTelegram Boolean @default(true)
  sendToEmail    Boolean @default(false)
  sendToWebApp   Boolean @default(true) // Для Mini App

  // Статус
  isRead      Boolean @default(false)
  isDelivered Boolean @default(false)

  // Планирование
  scheduledFor DateTime?
  sentAt       DateTime?

  // Данные для отображения
  iconUrl   String? // Иконка уведомления
  actionUrl String? // Ссылка для перехода
  metadata  Json? // Дополнительные данные

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AdminAction {
  id      String @id @default(cuid())
  adminId String

  // Тип действия
  type       AdminActionType
  targetId   String? // ID целевого объекта
  targetType String? // Тип целевого объекта

  // Описание
  description String
  comment     String?

  // Метаданные
  metadata Json? // Дополнительные данные о действии

  // Информация о запросе
  ipAddress  String?
  userAgent  String?
  clientType ClientType? // Откуда выполнено действие

  createdAt DateTime @default(now())

  // Связи
  admin User @relation(fields: [adminId], references: [id])

  @@map("admin_actions")
}

model Broadcast {
  id      String @id @default(cuid())
  adminId String

  // Содержание
  title     String
  message   String
  imageUrl  String?
  actionUrl String? // Ссылка для кнопки

  // Настройки рассылки
  target         BroadcastTarget
  targetRegionId String? // Для target BY_REGION

  // Каналы рассылки
  sendToBot    Boolean @default(true) // Отправить в Telegram Bot
  sendToWebApp Boolean @default(true) // Отправить в Mini App

  // Статус
  status BroadcastStatus @default(DRAFT)

  // Планирование
  scheduledFor DateTime?

  // Статистика
  totalRecipients Int @default(0)
  sentCount       Int @default(0)
  deliveredCount  Int @default(0)
  readCount       Int @default(0) // Количество прочитанных
  clickCount      Int @default(0) // Количество кликов
  failedCount     Int @default(0)

  // Ошибки
  errorMessage String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связи
  admin        User    @relation(fields: [adminId], references: [id])
  targetRegion Region? @relation(fields: [targetRegionId], references: [id])

  @@map("broadcasts")
}

model Config {
  id          String  @id @default(cuid())
  key         String  @unique
  value       String
  description String?

  // Область применения
  scope String @default("GLOBAL") // GLOBAL, BOT, WEBAPP, ADMIN

  // Метаданные
  isSystem    Boolean @default(false)
  isEncrypted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("configs")
}
