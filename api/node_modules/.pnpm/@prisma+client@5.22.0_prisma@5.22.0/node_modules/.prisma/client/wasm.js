
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  telegramId: 'telegramId',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  role: 'role',
  balance: 'balance',
  frozenBalance: 'frozenBalance',
  referralCode: 'referralCode',
  referredBy: 'referredBy',
  isActive: 'isActive',
  isBanned: 'isBanned',
  lastSeen: 'lastSeen',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RegionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  oneTimeTariff: 'oneTimeTariff',
  optimalTariff: 'optimalTariff',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserRegionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  regionId: 'regionId',
  tariffType: 'tariffType',
  paidUntil: 'paidUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VehicleCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VehicleTypeScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VehicleSubtypeScalarFieldEnum = {
  id: 'id',
  typeId: 'typeId',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserVehicleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  subtypeId: 'subtypeId',
  brand: 'brand',
  model: 'model',
  year: 'year',
  licensePlate: 'licensePlate',
  loadCapacity: 'loadCapacity',
  volumeCapacity: 'volumeCapacity',
  hasRefrigerator: 'hasRefrigerator',
  hasLifting: 'hasLifting',
  canCarryFragile: 'canCarryFragile',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  executorId: 'executorId',
  regionId: 'regionId',
  vehicleSubtypeId: 'vehicleSubtypeId',
  type: 'type',
  title: 'title',
  description: 'description',
  fromAddress: 'fromAddress',
  toAddress: 'toAddress',
  workAddress: 'workAddress',
  fromLatitude: 'fromLatitude',
  fromLongitude: 'fromLongitude',
  toLatitude: 'toLatitude',
  toLongitude: 'toLongitude',
  scheduledDate: 'scheduledDate',
  scheduledTime: 'scheduledTime',
  deadlineDate: 'deadlineDate',
  budget: 'budget',
  isFixedPrice: 'isFixedPrice',
  cargoWeight: 'cargoWeight',
  cargoVolume: 'cargoVolume',
  needsRefrigerator: 'needsRefrigerator',
  needsLifting: 'needsLifting',
  isFragile: 'isFragile',
  peopleCount: 'peopleCount',
  status: 'status',
  moderationComment: 'moderationComment',
  contactPhone: 'contactPhone',
  contactName: 'contactName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderResponseScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  executorId: 'executorId',
  proposedPrice: 'proposedPrice',
  comment: 'comment',
  isAccepted: 'isAccepted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tinkoffPaymentId: 'tinkoffPaymentId',
  tinkoffStatus: 'tinkoffStatus',
  amount: 'amount',
  description: 'description',
  status: 'status',
  metadata: 'metadata',
  paidAt: 'paidAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  chatId: 'chatId',
  state: 'state',
  context: 'context',
  lastActivity: 'lastActivity',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  isSent: 'isSent',
  scheduledFor: 'scheduledFor',
  sentAt: 'sentAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminActionScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  type: 'type',
  targetId: 'targetId',
  targetType: 'targetType',
  description: 'description',
  comment: 'comment',
  metadata: 'metadata',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.BroadcastScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  title: 'title',
  message: 'message',
  imageUrl: 'imageUrl',
  target: 'target',
  targetRegionId: 'targetRegionId',
  status: 'status',
  scheduledFor: 'scheduledFor',
  totalRecipients: 'totalRecipients',
  sentCount: 'sentCount',
  deliveredCount: 'deliveredCount',
  failedCount: 'failedCount',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  isSystem: 'isSystem',
  isEncrypted: 'isEncrypted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.RoleType = exports.$Enums.RoleType = {
  CUSTOMER: 'CUSTOMER',
  EXECUTOR: 'EXECUTOR',
  ADMIN: 'ADMIN'
};

exports.TariffType = exports.$Enums.TariffType = {
  ONE_TIME: 'ONE_TIME',
  OPTIMAL: 'OPTIMAL'
};

exports.OrderType = exports.$Enums.OrderType = {
  A_TO_B: 'A_TO_B',
  PLACE: 'PLACE',
  PEOPLE: 'PEOPLE'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  REJECTED: 'REJECTED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.AdminActionType = exports.$Enums.AdminActionType = {
  USER_BAN: 'USER_BAN',
  USER_UNBAN: 'USER_UNBAN',
  ORDER_APPROVE: 'ORDER_APPROVE',
  ORDER_REJECT: 'ORDER_REJECT',
  PAYMENT_REFUND: 'PAYMENT_REFUND',
  BROADCAST_SEND: 'BROADCAST_SEND',
  CONFIG_UPDATE: 'CONFIG_UPDATE'
};

exports.BroadcastTarget = exports.$Enums.BroadcastTarget = {
  ALL_USERS: 'ALL_USERS',
  CUSTOMERS: 'CUSTOMERS',
  EXECUTORS: 'EXECUTORS',
  BY_REGION: 'BY_REGION'
};

exports.BroadcastStatus = exports.$Enums.BroadcastStatus = {
  DRAFT: 'DRAFT',
  SCHEDULED: 'SCHEDULED',
  SENDING: 'SENDING',
  SENT: 'SENT',
  FAILED: 'FAILED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Region: 'Region',
  UserRegion: 'UserRegion',
  VehicleCategory: 'VehicleCategory',
  VehicleType: 'VehicleType',
  VehicleSubtype: 'VehicleSubtype',
  UserVehicle: 'UserVehicle',
  Order: 'Order',
  OrderResponse: 'OrderResponse',
  Payment: 'Payment',
  Session: 'Session',
  Notification: 'Notification',
  AdminAction: 'AdminAction',
  Broadcast: 'Broadcast',
  Config: 'Config'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
