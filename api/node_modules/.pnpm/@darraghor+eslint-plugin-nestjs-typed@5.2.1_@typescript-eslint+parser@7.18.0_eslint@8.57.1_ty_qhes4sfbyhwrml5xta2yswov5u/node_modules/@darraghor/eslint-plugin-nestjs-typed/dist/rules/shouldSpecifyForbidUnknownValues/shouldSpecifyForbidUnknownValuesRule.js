"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.shouldTriggerForVariableDeclaratorExpression = exports.shouldTriggerNewExpressionHasProperty = exports.checkObjectExpression = exports.isValidationPipeNewExpression = void 0;
const utils_1 = require("@typescript-eslint/utils");
const createRule_1 = require("../../utils/createRule");
const utils_2 = require("@typescript-eslint/utils");
const isValidationPipeNewExpression = (node) => {
    const newExpression = node;
    const callee = newExpression?.callee;
    if (callee && callee.name === "ValidationPipe") {
        return true;
    }
    return false;
};
exports.isValidationPipeNewExpression = isValidationPipeNewExpression;
const checkObjectExpression = (os) => {
    if (!os) {
        return false;
    }
    // eslint-disable-next-line @typescript-eslint/non-nullable-type-assertion-style
    const forbidUnknownValuesProperty = os?.properties
        ?.filter(utils_2.ASTUtils.isNodeOfType(utils_1.TSESTree.AST_NODE_TYPES.Property))
        .find((p) => p.key.name === "forbidUnknownValues");
    // property is not present. this is wrong.
    if (os && !forbidUnknownValuesProperty) {
        return true;
    }
    // property is explicitly false. this is wrong.
    const isPropertyValueExplicitlyFalse = (forbidUnknownValuesProperty?.value).raw ===
        "false";
    if (isPropertyValueExplicitlyFalse) {
        return true;
    }
    // otherwise ignore this. we don't know the value.
    return false;
};
exports.checkObjectExpression = checkObjectExpression;
const shouldTriggerNewExpressionHasProperty = (node) => {
    // only look at ValidationPipe expressions
    if (!(0, exports.isValidationPipeNewExpression)(node)) {
        return false;
    }
    const newExpression = node;
    // the default new ValidationPipe() seems to prevent the attack so we ignore calls with no parameters
    // we also ignore parameters that are not explicit object expressions
    // or if the properties are spread
    if (newExpression.arguments?.length === 0 ||
        newExpression.arguments[0].type !==
            utils_1.TSESTree.AST_NODE_TYPES.ObjectExpression ||
        newExpression.arguments[0].properties.some(utils_2.ASTUtils.isNodeOfType(utils_1.TSESTree.AST_NODE_TYPES.SpreadElement))) {
        return false;
    }
    const argument = newExpression?.arguments[0];
    return (0, exports.checkObjectExpression)(argument);
};
exports.shouldTriggerNewExpressionHasProperty = shouldTriggerNewExpressionHasProperty;
const shouldTriggerForVariableDeclaratorExpression = (node) => {
    // if the developer hasn't annotated the object we can't continue to check these rules correctly (we don't know if anonymous objects need to have any props)
    const variableDeclarator = node;
    const asExpression = variableDeclarator?.init;
    const typeAnnotation = asExpression?.typeAnnotation;
    const typeName = typeAnnotation?.typeName;
    if (typeName === undefined || typeName.name !== "ValidationPipeOptions") {
        return false;
    }
    // otherwise check the object expression is what we want
    return (0, exports.checkObjectExpression)(asExpression.expression);
};
exports.shouldTriggerForVariableDeclaratorExpression = shouldTriggerForVariableDeclaratorExpression;
const rule = (0, createRule_1.createRule)({
    name: "validation-pipe-should-use-forbid-unknown",
    meta: {
        docs: {
            description: "ValidationPipe should use forbidUnknownValues: true to prevent attacks. See https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18413",
        },
        messages: {
            shouldSpecifyForbidUnknownValues: `ValidationPipe should use forbidUnknownValues: true to prevent attacks if setting you're setting any options. See https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18413`,
        },
        schema: [],
        hasSuggestions: false,
        type: "suggestion",
    },
    defaultOptions: [],
    create(context) {
        return {
            // eslint-disable-next-line @typescript-eslint/naming-convention
            NewExpression(node) {
                // eslint-disable-next-line @typescript-eslint/naming-convention
                const result = (0, exports.shouldTriggerNewExpressionHasProperty)(node);
                if (result) {
                    context.report({
                        node: node,
                        messageId: "shouldSpecifyForbidUnknownValues",
                    });
                }
            },
            // eslint-disable-next-line @typescript-eslint/naming-convention
            VariableDeclarator(node) {
                // eslint-disable-next-line @typescript-eslint/naming-convention
                const result = (0, exports.shouldTriggerForVariableDeclaratorExpression)(node);
                if (result) {
                    context.report({
                        node: node,
                        messageId: "shouldSpecifyForbidUnknownValues",
                    });
                }
            },
        };
    },
});
exports.default = rule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdWxkU3BlY2lmeUZvcmJpZFVua25vd25WYWx1ZXNSdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3J1bGVzL3Nob3VsZFNwZWNpZnlGb3JiaWRVbmtub3duVmFsdWVzL3Nob3VsZFNwZWNpZnlGb3JiaWRVbmtub3duVmFsdWVzUnVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvREFBa0Q7QUFDbEQsdURBQWtEO0FBQ2xELG9EQUFrRDtBQUUzQyxNQUFNLDZCQUE2QixHQUFHLENBQUMsSUFBbUIsRUFBVyxFQUFFO0lBQzFFLE1BQU0sYUFBYSxHQUFHLElBQThCLENBQUM7SUFDckQsTUFBTSxNQUFNLEdBQUcsYUFBYSxFQUFFLE1BQTZCLENBQUM7SUFDNUQsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxnQkFBZ0IsRUFBRSxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDLENBQUM7QUFQVyxRQUFBLDZCQUE2QixpQ0FPeEM7QUFDSyxNQUFNLHFCQUFxQixHQUFHLENBQ2pDLEVBQTZCLEVBQ3RCLEVBQUU7SUFDVCxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDTixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBQ0QsZ0ZBQWdGO0lBQ2hGLE1BQU0sMkJBQTJCLEdBQUcsRUFBRSxFQUFFLFVBQVU7UUFDOUMsRUFBRSxNQUFNLENBQUMsZ0JBQVEsQ0FBQyxZQUFZLENBQUMsZ0JBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDaEUsSUFBSSxDQUNELENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBRSxDQUFDLENBQUMsR0FBMkIsQ0FBQyxJQUFJLEtBQUsscUJBQXFCLENBQ2xELENBQUM7SUFDM0IsMENBQTBDO0lBQzFDLElBQUksRUFBRSxJQUFJLENBQUMsMkJBQTJCLEVBQUUsQ0FBQztRQUNyQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBQ0QsK0NBQStDO0lBQy9DLE1BQU0sOEJBQThCLEdBQ2hDLENBQUMsMkJBQTJCLEVBQUUsS0FBMEIsQ0FBQSxDQUFDLEdBQUc7UUFDNUQsT0FBTyxDQUFDO0lBQ1osSUFBSSw4QkFBOEIsRUFBRSxDQUFDO1FBQ2pDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDRCxrREFBa0Q7SUFDbEQsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBekJXLFFBQUEscUJBQXFCLHlCQXlCaEM7QUFFSyxNQUFNLHFDQUFxQyxHQUFHLENBQ2pELElBQW1CLEVBQ1osRUFBRTtJQUNULDBDQUEwQztJQUMxQyxJQUFJLENBQUMsSUFBQSxxQ0FBNkIsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ3ZDLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFDRCxNQUFNLGFBQWEsR0FBRyxJQUE4QixDQUFDO0lBQ3JELHFHQUFxRztJQUNyRyxxRUFBcUU7SUFDckUsa0NBQWtDO0lBQ2xDLElBQ0ksYUFBYSxDQUFDLFNBQVMsRUFBRSxNQUFNLEtBQUssQ0FBQztRQUNyQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUk7WUFDM0IsZ0JBQVEsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCO1FBQzVDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDdEMsZ0JBQVEsQ0FBQyxZQUFZLENBQUMsZ0JBQVEsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQy9ELEVBQ0gsQ0FBQztRQUNDLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFDRCxNQUFNLFFBQVEsR0FBRyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTdDLE9BQU8sSUFBQSw2QkFBcUIsRUFBQyxRQUFRLENBQUMsQ0FBQztBQUMzQyxDQUFDLENBQUM7QUF4QlcsUUFBQSxxQ0FBcUMseUNBd0JoRDtBQUVLLE1BQU0sNENBQTRDLEdBQUcsQ0FDeEQsSUFBaUMsRUFDMUIsRUFBRTtJQUNULDRKQUE0SjtJQUM1SixNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQztJQUNoQyxNQUFNLFlBQVksR0FBRyxrQkFBa0IsRUFBRSxJQUErQixDQUFDO0lBQ3pFLE1BQU0sY0FBYyxHQUNoQixZQUFZLEVBQUUsY0FBMEMsQ0FBQztJQUM3RCxNQUFNLFFBQVEsR0FBRyxjQUFjLEVBQUUsUUFBK0IsQ0FBQztJQUNqRSxJQUFJLFFBQVEsS0FBSyxTQUFTLElBQUksUUFBUSxDQUFDLElBQUksS0FBSyx1QkFBdUIsRUFBRSxDQUFDO1FBQ3RFLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFDRCx3REFBd0Q7SUFDeEQsT0FBTyxJQUFBLDZCQUFxQixFQUN4QixZQUFZLENBQUMsVUFBdUMsQ0FDdkQsQ0FBQztBQUNOLENBQUMsQ0FBQztBQWhCVyxRQUFBLDRDQUE0QyxnREFnQnZEO0FBRUYsTUFBTSxJQUFJLEdBQUcsSUFBQSx1QkFBVSxFQUF5QztJQUM1RCxJQUFJLEVBQUUsMkNBQTJDO0lBQ2pELElBQUksRUFBRTtRQUNGLElBQUksRUFBRTtZQUNGLFdBQVcsRUFDUCwySUFBMkk7U0FDbEo7UUFDRCxRQUFRLEVBQUU7WUFDTixnQ0FBZ0MsRUFBRSxpTEFBaUw7U0FDdE47UUFDRCxNQUFNLEVBQUUsRUFBRTtRQUNWLGNBQWMsRUFBRSxLQUFLO1FBQ3JCLElBQUksRUFBRSxZQUFZO0tBQ3JCO0lBQ0QsY0FBYyxFQUFFLEVBQUU7SUFFbEIsTUFBTSxDQUFDLE9BQU87UUFDVixPQUFPO1lBQ0gsZ0VBQWdFO1lBQ2hFLGFBQWEsQ0FBQyxJQUE0QjtnQkFDdEMsZ0VBQWdFO2dCQUNoRSxNQUFNLE1BQU0sR0FBRyxJQUFBLDZDQUFxQyxFQUFDLElBQUksQ0FBQyxDQUFDO2dCQUUzRCxJQUFJLE1BQU0sRUFBRSxDQUFDO29CQUNULE9BQU8sQ0FBQyxNQUFNLENBQUM7d0JBQ1gsSUFBSSxFQUFFLElBQUk7d0JBQ1YsU0FBUyxFQUFFLGtDQUFrQztxQkFDaEQsQ0FBQyxDQUFDO2dCQUNQLENBQUM7WUFDTCxDQUFDO1lBQ0QsZ0VBQWdFO1lBQ2hFLGtCQUFrQixDQUFDLElBQWlDO2dCQUNoRCxnRUFBZ0U7Z0JBQ2hFLE1BQU0sTUFBTSxHQUNSLElBQUEsb0RBQTRDLEVBQUMsSUFBSSxDQUFDLENBQUM7Z0JBRXZELElBQUksTUFBTSxFQUFFLENBQUM7b0JBQ1QsT0FBTyxDQUFDLE1BQU0sQ0FBQzt3QkFDWCxJQUFJLEVBQUUsSUFBSTt3QkFDVixTQUFTLEVBQUUsa0NBQWtDO3FCQUNoRCxDQUFDLENBQUM7Z0JBQ1AsQ0FBQztZQUNMLENBQUM7U0FDSixDQUFDO0lBQ04sQ0FBQztDQUNKLENBQUMsQ0FBQztBQUVILGtCQUFlLElBQUksQ0FBQyJ9