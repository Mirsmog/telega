"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasMismatchedInjected = void 0;
const createRule_1 = require("../../utils/createRule");
// eslint-disable-next-line unicorn/import-style
//import util from "util";
const nestProviderAstParser_1 = require("../../utils/nestModules/nestProviderAstParser");
const hasMismatchedInjected = (node) => {
    // should be a nest provider - note this doesn't check the Provider used is an import actually from nest. Assumes nest Provider. Will change if this is annoying:)
    // edit 03/06/2023 - it was annoying and someone complained on github so I added a check for a "useFactory" property on the Provider declaration
    const isNestProvider = node.id.typeAnnotation
        ?.typeAnnotation
    // prettier-ignore
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ?.typeName?.name === "Provider" &&
        // and there is a useFactory property in the declaration
        nestProviderAstParser_1.nestProviderAstParser.findProvideProperty(node, "useFactory");
    if (!isNestProvider) {
        return false;
    }
    // count number of factory params
    const factoryParameterCount = nestProviderAstParser_1.nestProviderAstParser.findProvideProperty(node, "useFactory")
        ?.value?.params?.length;
    // Count number of injected params
    const injectedParameter = nestProviderAstParser_1.nestProviderAstParser.findProvideProperty(node, "inject")?.value;
    const injectedParameterCount = injectedParameter
        ? injectedParameter.elements.length
        : 0;
    // is there a mismatch?
    return injectedParameterCount !== factoryParameterCount;
};
exports.hasMismatchedInjected = hasMismatchedInjected;
const rule = (0, createRule_1.createRule)({
    name: "provided-injected-should-match-factory-parameters",
    meta: {
        docs: {
            description: "The injected items in a provider should typically match the parameters to the factory method used",
        },
        messages: {
            mainMessage: `The injected items don't match the factory method parameters, did you forget to add one?`,
        },
        schema: [],
        type: "problem",
    },
    defaultOptions: [],
    create(context) {
        return {
            // eslint-disable-next-line @typescript-eslint/naming-convention
            VariableDeclarator(node) {
                if ((0, exports.hasMismatchedInjected)(node)) {
                    context.report({
                        node: node,
                        messageId: "mainMessage",
                    });
                }
            },
        };
    },
});
exports.default = rule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvdmlkZXJJbmplY3RlZFNob3VsZE1hdGNoRmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ydWxlcy9wcm92aWRlckluamVjdGVkU2hvdWxkTWF0Y2hGYWN0b3J5L1Byb3ZpZGVySW5qZWN0ZWRTaG91bGRNYXRjaEZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsdURBQWtEO0FBQ2xELGdEQUFnRDtBQUNoRCwwQkFBMEI7QUFDMUIseUZBQW9GO0FBRTdFLE1BQU0scUJBQXFCLEdBQUcsQ0FDakMsSUFBaUMsRUFDMUIsRUFBRTtJQUNULGtLQUFrSztJQUNsSyxnSkFBZ0o7SUFDaEosTUFBTSxjQUFjLEdBR1osSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFjO1FBQ2xCLEVBQUUsY0FBMEM7SUFDdEQsa0JBQWtCO0lBQ2xCLDhEQUE4RDtJQUMzRCxFQUFFLFFBQ0YsRUFBRSxJQUFJLEtBQUssVUFBVTtRQUN0Qix3REFBd0Q7UUFDeEQsNkNBQXFCLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBRWxFLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNsQixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQsaUNBQWlDO0lBQ2pDLE1BQU0scUJBQXFCLEdBQ3ZCLDZDQUFxQixDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxZQUFZLENBQUM7UUFDekQsRUFBRSxLQUNULEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQztJQUVsQixrQ0FBa0M7SUFDbEMsTUFBTSxpQkFBaUIsR0FBRyw2Q0FBcUIsQ0FBQyxtQkFBbUIsQ0FDL0QsSUFBSSxFQUNKLFFBQVEsQ0FDWCxFQUFFLEtBQTRDLENBQUM7SUFFaEQsTUFBTSxzQkFBc0IsR0FBRyxpQkFBaUI7UUFDNUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxNQUFNO1FBQ25DLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFUix1QkFBdUI7SUFDdkIsT0FBTyxzQkFBc0IsS0FBSyxxQkFBcUIsQ0FBQztBQUM1RCxDQUFDLENBQUM7QUF2Q1csUUFBQSxxQkFBcUIseUJBdUNoQztBQUVGLE1BQU0sSUFBSSxHQUFHLElBQUEsdUJBQVUsRUFBb0I7SUFDdkMsSUFBSSxFQUFFLG1EQUFtRDtJQUN6RCxJQUFJLEVBQUU7UUFDRixJQUFJLEVBQUU7WUFDRixXQUFXLEVBQ1AsbUdBQW1HO1NBQzFHO1FBQ0QsUUFBUSxFQUFFO1lBQ04sV0FBVyxFQUFFLDBGQUEwRjtTQUMxRztRQUNELE1BQU0sRUFBRSxFQUFFO1FBQ1YsSUFBSSxFQUFFLFNBQVM7S0FDbEI7SUFDRCxjQUFjLEVBQUUsRUFBRTtJQUVsQixNQUFNLENBQUMsT0FBTztRQUNWLE9BQU87WUFDSCxnRUFBZ0U7WUFDaEUsa0JBQWtCLENBQUMsSUFBaUM7Z0JBQ2hELElBQUksSUFBQSw2QkFBcUIsRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDO29CQUM5QixPQUFPLENBQUMsTUFBTSxDQUFDO3dCQUNYLElBQUksRUFBRSxJQUFJO3dCQUNWLFNBQVMsRUFBRSxhQUFhO3FCQUMzQixDQUFDLENBQUM7Z0JBQ1AsQ0FBQztZQUNMLENBQUM7U0FDSixDQUFDO0lBQ04sQ0FBQztDQUNKLENBQUMsQ0FBQztBQUVILGtCQUFlLElBQUksQ0FBQyJ9