"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nestModuleAstParser = void 0;
const utils_1 = require("@typescript-eslint/utils");
const NestProvidedInjectablesMap_1 = require("./models/NestProvidedInjectablesMap");
exports.nestModuleAstParser = {
    findNestModuleClass(ast) {
        for (const n of ast.body) {
            // find class declaration even if it's inside an export
            if (n.type === utils_1.AST_NODE_TYPES.ClassDeclaration &&
                n.decorators &&
                n.decorators.length > 0) {
                return n;
            }
            if ((n.type === utils_1.AST_NODE_TYPES.ExportNamedDeclaration ||
                n.type === utils_1.AST_NODE_TYPES.ExportDefaultDeclaration) &&
                n.declaration?.type === utils_1.AST_NODE_TYPES.ClassDeclaration) {
                return n.declaration;
            }
        }
        return null;
    },
    mapNestModuleDecorator(n, path) {
        // The nest module decorator is called "Module"
        const moduleDecorator = n.decorators?.find((d) => d.expression
            .callee?.name === "Module");
        if (moduleDecorator) {
            const mappedControllerElements = this.mapModuleDecoratorOptionProperty(moduleDecorator, "controllers");
            const mappedProviderElements = this.mapModuleDecoratorOptionProperty(moduleDecorator, "providers");
            const nestModuleMap = [
                path,
                new NestProvidedInjectablesMap_1.NestProvidedInjectablesMap(
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                mappedControllerElements, mappedProviderElements),
            ];
            return nestModuleMap;
        }
        return null;
    },
    mapModuleDecoratorOptionProperty(moduleDecorator, propertyName) {
        const optionProperty = moduleDecorator.expression
            .arguments[0].properties.find((p) => p.key.name ===
            propertyName);
        if (optionProperty) {
            // a property can be an array expression e.g. myProp = []
            // or a variable e.g. myProp = someArray
            // - this only supports array expressions for now!
            const propertyAsArrayExpressionElements = optionProperty
                .value?.elements || [];
            return new Set(propertyAsArrayExpressionElements.map((element) => element.name));
        }
        return new Set();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVzdE1vZHVsZUFzdFBhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9uZXN0TW9kdWxlcy9uZXN0TW9kdWxlQXN0UGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9EQUFrRTtBQUNsRSxvRkFBK0U7QUFFbEUsUUFBQSxtQkFBbUIsR0FBRztJQUMvQixtQkFBbUIsQ0FDZixHQUFxQjtRQUVyQixLQUFLLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN2Qix1REFBdUQ7WUFDdkQsSUFDSSxDQUFDLENBQUMsSUFBSSxLQUFLLHNCQUFjLENBQUMsZ0JBQWdCO2dCQUMxQyxDQUFDLENBQUMsVUFBVTtnQkFDWixDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQ3pCLENBQUM7Z0JBQ0MsT0FBTyxDQUFDLENBQUM7WUFDYixDQUFDO1lBRUQsSUFDSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssc0JBQWMsQ0FBQyxzQkFBc0I7Z0JBQzdDLENBQUMsQ0FBQyxJQUFJLEtBQUssc0JBQWMsQ0FBQyx3QkFBd0IsQ0FBQztnQkFDdkQsQ0FBQyxDQUFDLFdBQVcsRUFBRSxJQUFJLEtBQUssc0JBQWMsQ0FBQyxnQkFBZ0IsRUFDekQsQ0FBQztnQkFDQyxPQUFPLENBQUMsQ0FBQyxXQUFXLENBQUM7WUFDekIsQ0FBQztRQUNMLENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsc0JBQXNCLENBQ2xCLENBQTRCLEVBQzVCLElBQVk7UUFFWiwrQ0FBK0M7UUFDL0MsTUFBTSxlQUFlLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQ3RDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FFRyxDQUFDLENBQUMsVUFBc0M7YUFDcEMsTUFDUixFQUFFLElBQUksS0FBSyxRQUFRLENBQzNCLENBQUM7UUFDRixJQUFJLGVBQWUsRUFBRSxDQUFDO1lBQ2xCLE1BQU0sd0JBQXdCLEdBQzFCLElBQUksQ0FBQyxnQ0FBZ0MsQ0FDakMsZUFBZSxFQUNmLGFBQWEsQ0FDaEIsQ0FBQztZQUNOLE1BQU0sc0JBQXNCLEdBQ3hCLElBQUksQ0FBQyxnQ0FBZ0MsQ0FDakMsZUFBZSxFQUNmLFdBQVcsQ0FDZCxDQUFDO1lBRU4sTUFBTSxhQUFhLEdBQXlDO2dCQUN4RCxJQUFJO2dCQUNKLElBQUksdURBQTBCO2dCQUMxQiw4REFBOEQ7Z0JBQzlELHdCQUF3QixFQUN4QixzQkFBc0IsQ0FDekI7YUFDSixDQUFDO1lBQ0YsT0FBTyxhQUFhLENBQUM7UUFDekIsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDRCxnQ0FBZ0MsQ0FDNUIsZUFBbUMsRUFDbkMsWUFBb0I7UUFFcEIsTUFBTSxjQUFjLEdBQ2YsZUFBZSxDQUFDLFVBQWlEO2FBQzdELFNBQVMsQ0FBQyxDQUFDLENBQ25CLENBQUMsVUFBVSxDQUFDLElBQUksQ0FDYixDQUFDLENBQUMsRUFBRSxFQUFFLENBQ0EsQ0FBdUIsQ0FBQyxHQUEyQixDQUFDLElBQUk7WUFDMUQsWUFBWSxDQUNuQixDQUFDO1FBRUYsSUFBSSxjQUFjLEVBQUUsQ0FBQztZQUNqQix5REFBeUQ7WUFDekQsd0NBQXdDO1lBQ3hDLGtEQUFrRDtZQUVsRCxNQUFNLGlDQUFpQyxHQUU5QixjQUErQztpQkFDM0MsS0FDUixFQUFFLFFBQVEsSUFBSSxFQUFFLENBQUM7WUFFdEIsT0FBTyxJQUFJLEdBQUcsQ0FDVixpQ0FBaUMsQ0FBQyxHQUFHLENBQ2pDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBRSxPQUErQixDQUFDLElBQUksQ0FDckQsQ0FDSixDQUFDO1FBQ04sQ0FBQztRQUVELE9BQU8sSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0NBQ0osQ0FBQyJ9