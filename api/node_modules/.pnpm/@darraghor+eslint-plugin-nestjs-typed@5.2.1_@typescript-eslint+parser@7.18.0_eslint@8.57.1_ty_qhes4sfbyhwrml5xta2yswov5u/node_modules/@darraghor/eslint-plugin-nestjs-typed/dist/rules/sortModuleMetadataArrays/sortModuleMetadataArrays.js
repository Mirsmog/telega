"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRelevantNodeName = exports.isValidModuleMetaPropertyType = void 0;
const utils_1 = require("@typescript-eslint/utils");
const createRule_1 = require("../../utils/createRule");
const wellKnownSelectors_1 = require("../../utils/wellKnownSelectors");
const utils_2 = require("@typescript-eslint/utils");
// Inspired by https://github.com/angular-eslint/angular-eslint/blob/main/packages/eslint-plugin/src/rules/sort-ngmodule-metadata-arrays.ts
const DEFAULT_LOCALE = "en-US";
const isValidModuleMetaPropertyType = (node) => {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return (!!node &&
        utils_2.ASTUtils.isNodeOfTypes([
            utils_1.TSESTree.AST_NODE_TYPES.Identifier,
            utils_1.TSESTree.AST_NODE_TYPES.CallExpression,
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ])); // unsure about this type
};
exports.isValidModuleMetaPropertyType = isValidModuleMetaPropertyType;
const getRelevantNodeName = (node) => {
    let currentName = "";
    if (node.type === utils_1.TSESTree.AST_NODE_TYPES.Identifier) {
        currentName = node.name;
    }
    if (node.type === utils_1.TSESTree.AST_NODE_TYPES.CallExpression &&
        node.callee.type === utils_1.TSESTree.AST_NODE_TYPES.MemberExpression &&
        node.callee.object.type === utils_1.TSESTree.AST_NODE_TYPES.Identifier) {
        currentName = node.callee.object.name;
    }
    return currentName;
};
exports.getRelevantNodeName = getRelevantNodeName;
const defaultLocaleOptions = [
    {
        locale: DEFAULT_LOCALE,
    },
];
exports.default = (0, createRule_1.createRule)({
    name: "sort-module-metadata-arrays",
    meta: {
        type: "suggestion",
        docs: {
            description: "Ensures ASC alphabetical order for `Module` metadata arrays for easy visual scanning",
        },
        fixable: "code",
        schema: [
            {
                type: "object",
                properties: {
                    locale: {
                        type: "string",
                        description: "A string with a BCP 47 language tag.",
                        default: DEFAULT_LOCALE,
                    },
                },
                additionalProperties: false,
            },
        ],
        messages: {
            moduleMetadataArraysAreSorted: "`Module` metadata arrays should be sorted in ASC alphabetical order",
        },
    },
    defaultOptions: defaultLocaleOptions,
    create(contextWithoutDefaults) {
        const context = contextWithoutDefaults.options &&
            contextWithoutDefaults.options.length > 0
            ? contextWithoutDefaults
            : // only apply the defaults when the user provides no config
                Object.setPrototypeOf({
                    options: defaultLocaleOptions,
                }, contextWithoutDefaults);
        const { locale } = context.options[0];
        const sourceCode = context.getSourceCode();
        return {
            [`${wellKnownSelectors_1.MODULE_CLASS_DECORATOR} Property > ArrayExpression`]({ elements, }) {
                const unorderedNodes = elements
                    // nestjs modules use identifiers and call expressions
                    // can modify this later
                    .filter(exports.isValidModuleMetaPropertyType)
                    .map((current, index, list) => [current, list[index + 1]])
                    .find(([current, next]) => {
                    return (current &&
                        next &&
                        (0, exports.getRelevantNodeName)(current).localeCompare((0, exports.getRelevantNodeName)(next), locale) === 1);
                });
                if (!unorderedNodes)
                    return;
                const [unorderedNode, nextNode] = unorderedNodes;
                context.report({
                    node: nextNode, // can't really be null
                    messageId: "moduleMetadataArraysAreSorted",
                    fix: (fixer) => [
                        fixer.replaceText(unorderedNode, sourceCode.getText(nextNode)),
                        fixer.replaceText(nextNode, sourceCode.getText(unorderedNode)),
                    ],
                });
            },
        };
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydE1vZHVsZU1ldGFkYXRhQXJyYXlzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3J1bGVzL3NvcnRNb2R1bGVNZXRhZGF0YUFycmF5cy9zb3J0TW9kdWxlTWV0YWRhdGFBcnJheXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0RBQWtEO0FBQ2xELHVEQUFrRDtBQUNsRCx1RUFBc0U7QUFDdEUsb0RBQWtEO0FBRWxELDJJQUEySTtBQUUzSSxNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUM7QUFZeEIsTUFBTSw2QkFBNkIsR0FBRyxDQUN6QyxJQUF5RCxFQUM3QixFQUFFO0lBQzlCLCtEQUErRDtJQUMvRCxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUk7UUFDVixnQkFBUSxDQUFDLGFBQWEsQ0FBQztZQUNuQixnQkFBUSxDQUFDLGNBQWMsQ0FBQyxVQUFVO1lBQ2xDLGdCQUFRLENBQUMsY0FBYyxDQUFDLGNBQWM7WUFDdEMsOERBQThEO1NBQ2pFLENBQUMsQ0FBUSxDQUFDLENBQUMseUJBQXlCO0FBQzdDLENBQUMsQ0FBQztBQVZXLFFBQUEsNkJBQTZCLGlDQVV4QztBQUNLLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxJQUFtQixFQUFFLEVBQUU7SUFDdkQsSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFDO0lBRXJCLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxnQkFBUSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNuRCxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztJQUM1QixDQUFDO0lBQ0QsSUFDSSxJQUFJLENBQUMsSUFBSSxLQUFLLGdCQUFRLENBQUMsY0FBYyxDQUFDLGNBQWM7UUFDcEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssZ0JBQVEsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCO1FBQzdELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxnQkFBUSxD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