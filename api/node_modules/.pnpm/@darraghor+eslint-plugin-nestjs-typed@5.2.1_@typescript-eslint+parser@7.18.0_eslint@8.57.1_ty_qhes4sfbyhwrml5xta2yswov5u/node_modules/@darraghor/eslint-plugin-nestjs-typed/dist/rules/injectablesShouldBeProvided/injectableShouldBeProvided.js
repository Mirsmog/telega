"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const createRule_1 = require("../../utils/createRule");
const fileEnumerationWrapper_1 = __importDefault(require("../../utils/files/fileEnumerationWrapper"));
const nestProvidedInjectableMapper_1 = __importDefault(require("../../utils/nestModules/nestProvidedInjectableMapper"));
const typedTokenHelpers_1 = require("../../utils/typedTokenHelpers");
let listOfPotentialNestModuleFiles;
let nestModuleMap;
const findModuleMapping = (className, propertyName, nestModuleMap) => {
    const modules = [...nestModuleMap.values()].filter((entry) => {
        return entry[propertyName].has(className);
    });
    return modules;
};
// super fragile types but whatevs
const checkNode = (node, decoratorName, propertyName, messageId, context) => {
    if (nestProvidedInjectableMapper_1.default.isNestInjectableThatIsNeverProvided(node)) {
        return;
    }
    if (typedTokenHelpers_1.typedTokenHelpers.nodeHasDecoratorsNamed(node, [decoratorName])) {
        const name = node.id?.name;
        if (!name) {
            return;
        }
        const foundModuleMaps = findModuleMapping(name, propertyName, nestModuleMap);
        if (foundModuleMaps.length === 1) {
            return;
        }
        // couldn't find map so error
        context.report({
            node: node,
            messageId: messageId,
            data: {
                references: foundModuleMaps.length,
                name: name,
            },
        });
    }
};
function initializeModuleMappings(sourcePath, filterFromPaths, context) {
    const mappedSourceDirectory = nestProvidedInjectableMapper_1.default.detectDirectoryToScanForFiles(sourcePath, process.cwd());
    listOfPotentialNestModuleFiles = fileEnumerationWrapper_1.default.enumerateFiles(mappedSourceDirectory, [".ts"], filterFromPaths);
    nestModuleMap = nestProvidedInjectableMapper_1.default.parseFileList(listOfPotentialNestModuleFiles, context);
}
const defaultOptions = [
    {
        src: ["src/**/*.ts"],
        filterFromPaths: ["dist", "node_modules", ".test.", ".spec."],
    },
];
const rule = (0, createRule_1.createRule)({
    name: "injectable-should-be-provided",
    meta: {
        docs: {
            description: "Public api methods should have documentation",
        },
        messages: {
            injectableInModule: `Expected Injectable "{{name}}" to be referenced in 1 module's providers array, but found {{references}} references. If you added it already but this error still shows in your editor, please change one character in the injectable file to poke your eslint plugin.`,
            controllersInModule: `Expected Controller "{{name}}" to be referenced in 1 module's controllers array, but found {{references}} references. If you added it already but this error still shows in your editor, please change one character in the controller file to poke your eslint plugin.`,
        },
        schema: [
            {
                type: "object",
                properties: {
                    src: {
                        description: "files/paths to be analyzed (only for provided injectable or controller)",
                        type: "array",
                        minItems: 1,
                        items: {
                            type: "string",
                            minLength: 1,
                        },
                    },
                    filterFromPaths: {
                        description: "strings to exclude from checks (only for provided injectable or controller)",
                        type: "array",
                        minItems: 1,
                        items: {
                            type: "string",
                            minLength: 1,
                        },
                    },
                },
            },
        ],
        type: "problem",
    },
    defaultOptions: defaultOptions,
    create(contextWithoutDefaults) {
        const context = contextWithoutDefaults.options &&
            contextWithoutDefaults.options.length > 0
            ? contextWithoutDefaults
            : // only apply the defaults when the user provides no config
                Object.setPrototypeOf({
                    options: defaultOptions,
                }, contextWithoutDefaults);
        const { src, filterFromPaths,
        // ignoreExports = [],
        // missingExports,
        // unusedExports,
         } = context.options[0] || {};
        if (nestModuleMap === undefined || nestModuleMap.size === 0) {
            initializeModuleMappings(src[0], filterFromPaths, context);
        }
        return {
            // eslint-disable-next-line @typescript-eslint/naming-convention
            ClassDeclaration(node) {
                checkNode(node, "Injectable", "providers", "injectableInModule", context);
                checkNode(node, "Controller", "controllers", "controllersInModule", context);
            },
            // eslint-disable-next-line @typescript-eslint/naming-convention
            "Program:exit"() {
                // map the source to a mapping thing
                // if not undefined set it to the mapping set
                const mappedProvidedInjectables = nestProvidedInjectableMapper_1.default.mapAllProvidedInjectables(context.getSourceCode().ast, context.getFilename());
                if (mappedProvidedInjectables !== null) {
                    nestModuleMap.set(mappedProvidedInjectables[0], mappedProvidedInjectables[1]);
                }
            },
        };
    },
});
exports.default = rule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5qZWN0YWJsZVNob3VsZEJlUHJvdmlkZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcnVsZXMvaW5qZWN0YWJsZXNTaG91bGRCZVByb3ZpZGVkL2luamVjdGFibGVTaG91bGRCZVByb3ZpZGVkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsdURBQWtEO0FBQ2xELHNHQUE2RTtBQUM3RSx3SEFBZ0c7QUFFaEcscUVBQWdFO0FBS2hFLElBQUksOEJBQTBDLENBQUM7QUFDL0MsSUFBSSxhQUFzRCxDQUFDO0FBUzNELE1BQU0saUJBQWlCLEdBQUcsQ0FDdEIsU0FBaUIsRUFDakIsWUFBeUMsRUFDekMsYUFBc0QsRUFDMUIsRUFBRTtJQUM5QixNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDekQsT0FBTyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQyxDQUFDO0FBRUYsa0NBQWtDO0FBQ2xDLE1BQU0sU0FBUyxHQUFHLENBQ2QsSUFBK0IsRUFDL0IsYUFBMEMsRUFDMUMsWUFBeUMsRUFDekMsU0FBdUQsRUFDdkQsT0FLQyxFQUNILEVBQUU7SUFDQSxJQUNJLHNDQUE0QixDQUFDLG1DQUFtQyxDQUFDLElBQUksQ0FBQyxFQUN4RSxDQUFDO1FBQ0MsT0FBTztJQUNYLENBQUM7SUFDRCxJQUFJLHFDQUFpQixDQUFDLHNCQUFzQixDQUFDLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNsRSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDUixPQUFPO1FBQ1gsQ0FBQztRQUNELE1BQU0sZUFBZSxHQUFHLGlCQUFpQixDQUNyQyxJQUFJLEVBQ0osWUFBWSxFQUNaLGFBQWEsQ0FDaEIsQ0FBQztRQUVGLElBQUksZUFBZSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUMvQixPQUFPO1FBQ1gsQ0FBQztRQUNELDZCQUE2QjtRQUM3QixPQUFPLENBQUMsTUFBTSxDQUFDO1lBQ1gsSUFBSSxFQUFFLElBQUk7WUFDVixTQUFTLEVBQUUsU0FBUztZQUNwQixJQUFJLEVBQUU7Z0JBQ0YsVUFBVSxFQUFFLGVBQWUsQ0FBQyxNQUFNO2dCQUNsQyxJQUFJLEVBQUUsSUFBSTthQUNiO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGLFNBQVMsd0JBQXdCLENBQzdCLFVBQWtCLEVBQ2xCLGVBQXlCLEVBQ3pCLE9BQXVEO0lBRXZELE1BQU0scUJBQXFCLEdBQ3ZCLHNDQUE0QixDQUFDLDZCQUE2QixDQUN0RCxVQUFVLEVBQ1YsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUNoQixDQUFDO0lBQ04sOEJBQThCLEdBQUcsZ0NBQXFCLENBQUMsY0FBYyxDQUNqRSxxQkFBcUIsRUFDckIsQ0FBQyxLQUFLLENBQUMsRUFDUCxlQUFlLENBQ2xCLENBQUM7SUFFRixhQUFhLEdBQUcsc0NBQTRCLENBQUMsYUFBYSxDQUN0RCw4QkFBOEIsRUFDOUIsT0FBTyxDQUNWLENBQUM7QUFDTixDQUFDO0FBQ0QsTUFBTSxjQUFjLEdBQUc7SUFDbkI7UUFDSSxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUM7UUFDcEIsZUFBZSxFQUFFLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDO0tBQ2hFO0NBQ08sQ0FBQztBQUNiLE1BQU0sSUFBSSxHQUFHLElBQUEsdUJBQVUsRUFBd0Q7SUFDM0UsSUFBSSxFQUFFLCtCQUErQjtJQUNyQyxJQUFJLEVBQUU7UUFDRixJQUFJLEVBQUU7WUFDRixXQUFXLEVBQUUsOENBQThDO1NBQzlEO1FBQ0QsUUFBUSxFQUFFO1lBQ04sa0JBQWtCLEVBQUUsdVFBQXVRO1lBQzNSLG1CQUFtQixFQUFFLHlRQUF5UTtTQUNqUztRQUNELE1BQU0sRUFBRTtZQUNKO2dCQUNJLElBQUksRUFBRSxRQUErQjtnQkFDckMsVUFBVSxFQUFFO29CQUNSLEdBQUcsRUFBRTt3QkFDRCxXQUFXLEVBQ1AseUVBQXlFO3dCQUM3RSxJQUFJLEVBQUUsT0FBOEI7d0JBQ3BDLFFBQVEsRUFBRSxDQUFDO3dCQUNYLEtBQUssRUFBRTs0QkFDSCxJQUFJLEVBQUUsUUFBK0I7NEJBQ3JDLFNBQVMsRUFBRSxDQUFDO3lCQUNmO3FCQUNKO29CQUNELGVBQWUsRUFBRTt3QkFDYixXQUFXLEVBQ1AsNkVBQTZFO3dCQUNqRixJQUFJLEVBQUUsT0FBOEI7d0JBQ3BDLFFBQVEsRUFBRSxDQUFDO3dCQUNYLEtBQUssRUFBRTs0QkFDSCxJQUFJLEVBQUUsUUFBK0I7NEJBQ3JDLFNBQVMsRUFBRSxDQUFDO3lCQUNmO3FCQUNKO2lCQUNKO2FBQ0o7U0FDSjtRQUNELElBQUksRUFBRSxTQUFTO0tBQ2xCO0lBQ0QsY0FBYyxFQUFFLGNBQWM7SUFFOUIsTUFBTSxDQUFDLHNCQUFzQjtRQUN6QixNQUFNLE9BQU8sR0FDVCxzQkFBc0IsQ0FBQyxPQUFPO1lBQzlCLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQztZQUNyQyxDQUFDLENBQUMsc0JBQXNCO1lBQ3hCLENBQUMsQ0FBQywyREFBMkQ7Z0JBQzFELE1BQU0sQ0FBQyxjQUFjLENBQ2xCO29CQUNJLE9BQU8sRUFBRSxjQUFjO2lCQUMxQixFQUNELHNCQUFzQixDQU14QixDQUFDO1FBRWIsTUFBTSxFQUNGLEdBQUcsRUFDSCxlQUFlO1FBQ2Ysc0JBQXNCO1FBQ3RCLGtCQUFrQjtRQUNsQixpQkFBaUI7VUFDcEIsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUU3QixJQUFJLGFBQWEsS0FBSyxTQUFTLElBQUksYUFBYSxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUMxRCx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9ELENBQUM7UUFFRCxPQUFPO1lBQ0gsZ0VBQWdFO1lBQ2hFLGdCQUFnQixDQUFDLElBQStCO2dCQUM1QyxTQUFTLENBQ0wsSUFBSSxFQUNKLFlBQVksRUFDWixXQUFXLEVBQ1gsb0JBQW9CLEVBQ3BCLE9BQU8sQ0FDVixDQUFDO2dCQUNGLFNBQVMsQ0FDTCxJQUFJLEVBQ0osWUFBWSxFQUNaLGFBQWEsRUFDYixxQkFBcUIsRUFDckIsT0FBTyxDQUNWLENBQUM7WUFDTixDQUFDO1lBQ0QsZ0VBQWdFO1lBQ2hFLGNBQWM7Z0JBQ1Ysb0NBQW9DO2dCQUNwQyw2Q0FBNkM7Z0JBQzdDLE1BQU0seUJBQXlCLEdBQzNCLHNDQUE0QixDQUFDLHlCQUF5QixDQUNsRCxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUMsR0FBRyxFQUMzQixPQUFPLENBQUMsV0FBVyxFQUFFLENBQ3hCLENBQUM7Z0JBQ04sSUFBSSx5QkFBeUIsS0FBSyxJQUFJLEVBQUUsQ0FBQztvQkFDckMsYUFBYSxDQUFDLEdBQUcsQ0FDYix5QkFBeUIsQ0FBQyxDQUFDLENBQUMsRUFDNUIseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7Z0JBQ04sQ0FBQztZQUNMLENBQUM7U0FDSixDQUFDO0lBQ04sQ0FBQztDQUNKLENBQUMsQ0FBQztBQUVILGtCQUFlLElBQUksQ0FBQyJ9