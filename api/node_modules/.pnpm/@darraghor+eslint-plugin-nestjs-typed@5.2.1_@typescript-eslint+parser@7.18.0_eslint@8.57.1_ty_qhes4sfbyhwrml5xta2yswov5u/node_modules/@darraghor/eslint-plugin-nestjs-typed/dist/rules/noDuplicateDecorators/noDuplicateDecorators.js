"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.standardDecoratorsToValidate = exports.shouldTrigger = void 0;
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable unicorn/prevent-abbreviations */
const createRule_1 = require("../../utils/createRule");
const utils_1 = require("@typescript-eslint/utils");
const shouldTrigger = () => {
    return true;
};
exports.shouldTrigger = shouldTrigger;
exports.standardDecoratorsToValidate = ["Controller", "Injectable"];
const rule = (0, createRule_1.createRule)({
    name: "no-duplicate-decorators",
    meta: {
        docs: {
            description: "Some decorators should only be used once on a property or class. This rule enforces that.",
        },
        messages: {
            noDuplicateDecorators: "You have listed the same decorator more than once. Was this intentional?",
        },
        schema: [
            {
                type: "object",
                properties: {
                    customList: {
                        description: "A list of custom decorators that this rule will validate for duplicates",
                        type: "array",
                        minItems: 0,
                        items: {
                            type: "string",
                            minLength: 1,
                        },
                    },
                },
            },
        ],
        hasSuggestions: true,
        type: "suggestion",
    },
    defaultOptions: [
        {
            customList: new Array(),
        },
    ],
    create(context) {
        const customListArrayItem = context.options?.[0];
        let decoratorsToValidate = customListArrayItem?.customList;
        if (!customListArrayItem?.customList ||
            customListArrayItem?.customList.length === 0) {
            decoratorsToValidate = exports.standardDecoratorsToValidate;
        }
        return {
            ["PropertyDefinition,ClassDeclaration"](node) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any
                const allDecorators = node?.decorators;
                if (allDecorators && allDecorators.length > 1) {
                    const decoratorNames = allDecorators.map((decorator) => {
                        if (decorator.expression.type ===
                            utils_1.TSESTree.AST_NODE_TYPES.CallExpression &&
                            decorator.expression.callee &&
                            decorator.expression.callee.type ===
                                utils_1.TSESTree.AST_NODE_TYPES.Identifier) {
                            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
                            return decorator.expression.callee.name;
                        }
                        return "";
                    });
                    const duplicateDecorators = decoratorNames.filter((decoratorName, index) => {
                        return (decoratorName &&
                            decoratorNames.indexOf(decoratorName) !== index);
                    });
                    if (duplicateDecorators.length > 0 &&
                        decoratorsToValidate.some((decoratorToValidate) => duplicateDecorators.includes(decoratorToValidate))) {
                        context.report({
                            node: node,
                            messageId: "noDuplicateDecorators",
                            suggest: [
                                {
                                    messageId: "noDuplicateDecorators",
                                    fix: (fixer) => {
                                        const decoratorsToKeep = decoratorNames.filter((decoratorName, index) => {
                                            return (decoratorName &&
                                                decoratorNames.indexOf(decoratorName) === index);
                                        });
                                        const decoratorsToKeepText = decoratorsToKeep.join(", ");
                                        return fixer.replaceText(node, decoratorsToKeepText);
                                    },
                                },
                            ],
                        });
                    }
                }
            },
        };
    },
});
exports.default = rule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9EdXBsaWNhdGVEZWNvcmF0b3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3J1bGVzL25vRHVwbGljYXRlRGVjb3JhdG9ycy9ub0R1cGxpY2F0ZURlY29yYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0RBQStEO0FBQy9ELGtEQUFrRDtBQUNsRCx1REFBa0Q7QUFFbEQsb0RBQWtEO0FBTzNDLE1BQU0sYUFBYSxHQUFHLEdBQVksRUFBRTtJQUN2QyxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDLENBQUM7QUFGVyxRQUFBLGFBQWEsaUJBRXhCO0FBQ1csUUFBQSw0QkFBNEIsR0FBRyxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQztBQUN6RSxNQUFNLElBQUksR0FBRyxJQUFBLHVCQUFVLEVBQXdEO0lBQzNFLElBQUksRUFBRSx5QkFBeUI7SUFDL0IsSUFBSSxFQUFFO1FBQ0YsSUFBSSxFQUFFO1lBQ0YsV0FBVyxFQUNQLDJGQUEyRjtTQUNsRztRQUNELFFBQVEsRUFBRTtZQUNOLHFCQUFxQixFQUNqQiwwRUFBMEU7U0FDakY7UUFDRCxNQUFNLEVBQUU7WUFDSjtnQkFDSSxJQUFJLEVBQUUsUUFBK0I7Z0JBQ3JDLFVBQVUsRUFBRTtvQkFDUixVQUFVLEVBQUU7d0JBQ1IsV0FBVyxFQUNQLHlFQUF5RTt3QkFDN0UsSUFBSSxFQUFFLE9BQThCO3dCQUNwQyxRQUFRLEVBQUUsQ0FBQzt3QkFDWCxLQUFLLEVBQUU7NEJBQ0gsSUFBSSxFQUFFLFFBQStCOzRCQUNyQyxTQUFTLEVBQUUsQ0FBQzt5QkFDZjtxQkFDSjtpQkFDSjthQUNKO1NBQ0o7UUFDRCxjQUFjLEVBQUUsSUFBSTtRQUNwQixJQUFJLEVBQUUsWUFBWTtLQUNyQjtJQUNELGNBQWMsRUFBRTtRQUNaO1lBQ0ksVUFBVSxFQUFFLElBQUksS0FBSyxFQUFVO1NBQ2xDO0tBQ0o7SUFFRCxNQUFNLENBQUMsT0FBTztRQUNWLE1BQU0sbUJBQW1CLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pELElBQUksb0JBQW9CLEdBQWEsbUJBQW1CLEVBQUUsVUFBVSxDQUFDO1FBQ3JFLElBQ0ksQ0FBQyxtQkFBbUIsRUFBRSxVQUFVO1lBQ2hDLG1CQUFtQixFQUFFLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUM5QyxDQUFDO1lBQ0Msb0JBQW9CLEdBQUcsb0NBQTRCLENBQUM7UUFDeEQsQ0FBQztRQUNELE9BQU87WUFDSCxDQUFDLHFDQUFxQyxDQUFDLENBQUMsSUFBSTtnQkFDeEMsMEdBQTBHO2dCQUMxRyxNQUFNLGFBQWEsR0FDZixJQUdILEVBQUUsVUFBVSxDQUFDO2dCQUNkLElBQUksYUFBYSxJQUFJLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7b0JBQzVDLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQ3BDLENBQUMsU0FBUyxFQUFVLEVBQUU7d0JBQ2xCLElBQ0ksU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJOzRCQUNyQixnQkFBUSxDQUFDLGNBQWMsQ0FBQyxjQUFjOzRCQUMxQyxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQU07NEJBQzNCLFNBQVMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUk7Z0NBQzVCLGdCQUFRLENBQUMsY0FBYyxDQUFDLFVBQVUsRUFDeEMsQ0FBQzs0QkFDQywrREFBK0Q7NEJBQy9ELE9BQU8sU0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO3dCQUM1QyxDQUFDO3dCQUNELE9BQU8sRUFBRSxDQUFDO29CQUNkLENBQUMsQ0FDSixDQUFDO29CQUNGLE1BQU0sbUJBQW1CLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FDN0MsQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLEVBQUU7d0JBQ3JCLE9BQU8sQ0FDSCxhQUFhOzRCQUNiLGNBQWMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssS0FBSyxDQUNsRCxDQUFDO29CQUNOLENBQUMsQ0FDSixDQUFDO29CQUNGLElBQ0ksbUJBQW1CLENBQUMsTUFBTSxHQUFHLENBQUM7d0JBQzlCLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDLG1CQUFtQixFQUFFLEVBQUUsQ0FDOUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQ3BELEVBQ0gsQ0FBQzt3QkFDQyxPQUFPLENBQUMsTUFBTSxDQUFDOzRCQUNYLElBQUksRUFBRSxJQUFJOzRCQUNWLFNBQVMsRUFBRSx1QkFBdUI7NEJBQ2xDLE9BQU8sRUFBRTtnQ0FDTDtvQ0FDSSxTQUFTLEVBQUUsdUJBQXVCO29DQUNsQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTt3Q0FDWCxNQUFNLGdCQUFnQixHQUNsQixjQUFjLENBQUMsTUFBTSxDQUNqQixDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBRTs0Q0FDckIsT0FBTyxDQUNILGFBQWE7Z0RBQ2IsY0FBYyxDQUFDLE9BQU8sQ0FDbEIsYUFBYSxDQUNoQixLQUFLLEtBQUssQ0FDZCxDQUFDO3dDQUNOLENBQUMsQ0FDSixDQUFDO3dDQUNOLE1BQU0sb0JBQW9CLEdBQ3RCLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzt3Q0FDaEMsT0FBTyxLQUFLLENBQUMsV0FBVyxDQUNwQixJQUFJLEVBQ0osb0JBQW9CLENBQ3ZCLENBQUM7b0NBQ04sQ0FBQztpQ0FDSjs2QkFDSjt5QkFDSixDQUFDLENBQUM7b0JBQ1AsQ0FBQztnQkFDTCxDQUFDO1lBQ0wsQ0FBQztTQUNKLENBQUM7SUFDTixDQUFDO0NBQ0osQ0FBQyxDQUFDO0FBRUgsa0JBQWUsSUFBSSxDQUFDIn0=