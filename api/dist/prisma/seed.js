"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("@prisma/client");
const prisma = new client_1.PrismaClient();
async function main() {
    console.log('üå± Starting seed...');
    console.log('Creating regions...');
    const regions = await Promise.all([
        prisma.region.upsert({
            where: { code: 'MSK' },
            update: {},
            create: {
                name: '–ú–æ—Å–∫–≤–∞',
                code: 'MSK',
                regionCode: '01',
                oneTimePlanPrice: 350.00,
                monthlyPlanPrice: 2500.00,
            },
        }),
        prisma.region.upsert({
            where: { code: 'SPB' },
            update: {},
            create: {
                name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
                code: 'SPB',
                regionCode: '02',
                oneTimePlanPrice: 300.00,
                monthlyPlanPrice: 2200.00,
            },
        }),
        prisma.region.upsert({
            where: { code: 'EKB' },
            update: {},
            create: {
                name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
                code: 'EKB',
                regionCode: '03',
                oneTimePlanPrice: 250.00,
                monthlyPlanPrice: 1800.00,
            },
        }),
        prisma.region.upsert({
            where: { code: 'NSK' },
            update: {},
            create: {
                name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
                code: 'NSK',
                regionCode: '04',
                oneTimePlanPrice: 230.00,
                monthlyPlanPrice: 1600.00,
            },
        }),
        prisma.region.upsert({
            where: { code: 'KZN' },
            update: {},
            create: {
                name: '–ö–∞–∑–∞–Ω—å',
                code: 'KZN',
                regionCode: '05',
                oneTimePlanPrice: 220.00,
                monthlyPlanPrice: 1500.00,
            },
        }),
        prisma.region.upsert({
            where: { code: 'RND' },
            update: {},
            create: {
                name: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É',
                code: 'RND',
                regionCode: '06',
                oneTimePlanPrice: 200.00,
                monthlyPlanPrice: 1400.00,
            },
        }),
    ]);
    console.log(`‚úÖ Created ${regions.length} regions`);
    console.log('Creating vehicle catalog...');
    const carCategory = await prisma.vehicleCategory.upsert({
        where: { name: '–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏' },
        update: {},
        create: {
            name: '–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏',
            displayName: '–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏',
            description: '–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –ª—é–¥–µ–π',
        },
    });
    const carType = await prisma.vehicleType.upsert({
        where: { categoryId_name: { categoryId: carCategory.id, name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç' } },
        update: {},
        create: {
            categoryId: carCategory.id,
            name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç',
            displayName: '–°—Ç–∞–Ω–¥–∞—Ä—Ç',
            description: '–û–±—ã—á–Ω—ã–µ –ª–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏',
        },
    });
    await Promise.all([
        prisma.vehicleSubtype.upsert({
            where: { typeId_name: { typeId: carType.id, name: '–°–µ–¥–∞–Ω' } },
            update: {},
            create: {
                typeId: carType.id,
                name: '–°–µ–¥–∞–Ω',
                displayName: '–°–µ–¥–∞–Ω',
                description: '–°–µ–¥–∞–Ω (4 –º–µ—Å—Ç–∞)',
            },
        }),
        prisma.vehicleSubtype.upsert({
            where: { typeId_name: { typeId: carType.id, name: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª' } },
            update: {},
            create: {
                typeId: carType.id,
                name: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª',
                displayName: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª',
                description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª (5 –º–µ—Å—Ç)',
            },
        }),
        prisma.vehicleSubtype.upsert({
            where: { typeId_name: { typeId: carType.id, name: '–ú–∏–Ω–∏–≤—ç–Ω' } },
            update: {},
            create: {
                typeId: carType.id,
                name: '–ú–∏–Ω–∏–≤—ç–Ω',
                displayName: '–ú–∏–Ω–∏–≤—ç–Ω',
                description: '–ú–∏–Ω–∏–≤—ç–Ω (7-8 –º–µ—Å—Ç)',
            },
        }),
    ]);
    const truckCategory = await prisma.vehicleCategory.upsert({
        where: { name: '–ì—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏' },
        update: {},
        create: {
            name: '–ì—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏',
            displayName: '–ì—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏',
            description: '–ì—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –≥—Ä—É–∑–æ–≤',
        },
    });
    const lightTruckType = await prisma.vehicleType.upsert({
        where: { categoryId_name: { categoryId: truckCategory.id, name: '–õ–µ–≥–∫–∏–µ –≥—Ä—É–∑–æ–≤–∏–∫–∏' } },
        update: {},
        create: {
            categoryId: truckCategory.id,
            name: '–õ–µ–≥–∫–∏–µ –≥—Ä—É–∑–æ–≤–∏–∫–∏',
            displayName: '–õ–µ–≥–∫–∏–µ –≥—Ä—É–∑–æ–≤–∏–∫–∏',
            description: '–ì—Ä—É–∑–æ–≤–∏–∫–∏ –¥–æ 3.5 —Ç–æ–Ω–Ω',
        },
    });
    const mediumTruckType = await prisma.vehicleType.upsert({
        where: { categoryId_name: { categoryId: truckCategory.id, name: '–°—Ä–µ–¥–Ω–∏–µ –≥—Ä—É–∑–æ–≤–∏–∫–∏' } },
        update: {},
        create: {
            categoryId: truckCategory.id,
            name: '–°—Ä–µ–¥–Ω–∏–µ –≥—Ä—É–∑–æ–≤–∏–∫–∏',
            displayName: '–°—Ä–µ–¥–Ω–∏–µ –≥—Ä—É–∑–æ–≤–∏–∫–∏',
            description: '–ì—Ä—É–∑–æ–≤–∏–∫–∏ –æ—Ç 3.5 –¥–æ 12 —Ç–æ–Ω–Ω',
        },
    });
    await Promise.all([
        prisma.vehicleSubtype.upsert({
            where: { typeId_name: { typeId: lightTruckType.id, name: '–ì–∞–∑–µ–ª—å' } },
            update: {},
            create: {
                typeId: lightTruckType.id,
                name: '–ì–∞–∑–µ–ª—å',
                displayName: '–ì–∞–∑–µ–ª—å',
                description: '–ì–ê–ó–µ–ª—å –∏ –∞–Ω–∞–ª–æ–≥–∏ (–¥–æ 1.5 —Ç–æ–Ω–Ω)',
            },
        }),
        prisma.vehicleSubtype.upsert({
            where: { typeId_name: { typeId: lightTruckType.id, name: '–ë—ã—á–æ–∫' } },
            update: {},
            create: {
                typeId: lightTruckType.id,
                name: '–ë—ã—á–æ–∫',
                displayName: '–ë—ã—á–æ–∫',
                description: '–ú–∞–ª—ã–π –≥—Ä—É–∑–æ–≤–∏–∫ (–¥–æ 3 —Ç–æ–Ω–Ω)',
            },
        }),
        prisma.vehicleSubtype.upsert({
            where: { typeId_name: { typeId: mediumTruckType.id, name: '–°—Ä–µ–¥–Ω–∏–π –≥—Ä—É–∑–æ–≤–∏–∫' } },
            update: {},
            create: {
                typeId: mediumTruckType.id,
                name: '–°—Ä–µ–¥–Ω–∏–π –≥—Ä—É–∑–æ–≤–∏–∫',
                displayName: '–°—Ä–µ–¥–Ω–∏–π –≥—Ä—É–∑–æ–≤–∏–∫',
                description: '–ì—Ä—É–∑–æ–≤–∏–∫ 5-10 —Ç–æ–Ω–Ω',
            },
        }),
        prisma.vehicleSubtype.upsert({
            where: { typeId_name: { typeId: mediumTruckType.id, name: '–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä' } },
            update: {},
            create: {
                typeId: mediumTruckType.id,
                name: '–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä',
                displayName: '–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä',
                description: '–ì—Ä—É–∑–æ–≤–∏–∫ —Å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π',
            },
        }),
    ]);
    const specialCategory = await prisma.vehicleCategory.upsert({
        where: { name: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞' },
        update: {},
        create: {
            name: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
            displayName: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
            description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –æ—Å–æ–±—ã—Ö –∑–∞–¥–∞—á',
        },
    });
    const specialType = await prisma.vehicleType.upsert({
        where: { categoryId_name: { categoryId: specialCategory.id, name: '–°–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞' } },
        update: {},
        create: {
            categoryId: specialCategory.id,
            name: '–°–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞',
            displayName: '–°–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞',
            description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
        },
    });
    await Promise.all([
        prisma.vehicleSubtype.upsert({
            where: { typeId_name: { typeId: specialType.id, name: '–≠–≤–∞–∫—É–∞—Ç–æ—Ä' } },
            update: {},
            create: {
                typeId: specialType.id,
                name: '–≠–≤–∞–∫—É–∞—Ç–æ—Ä',
                displayName: '–≠–≤–∞–∫—É–∞—Ç–æ—Ä',
                description: '–≠–≤–∞–∫—É–∞—Ç–æ—Ä –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π',
            },
        }),
        prisma.vehicleSubtype.upsert({
            where: { typeId_name: { typeId: specialType.id, name: '–ö—Ä–∞–Ω' } },
            update: {},
            create: {
                typeId: specialType.id,
                name: '–ö—Ä–∞–Ω',
                displayName: '–ö—Ä–∞–Ω',
                description: '–ê–≤—Ç–æ–∫—Ä–∞–Ω –¥–ª—è –ø–æ–¥—ä–µ–º–Ω—ã—Ö —Ä–∞–±–æ—Ç',
            },
        }),
        prisma.vehicleSubtype.upsert({
            where: { typeId_name: { typeId: specialType.id, name: '–ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä' } },
            update: {},
            create: {
                typeId: specialType.id,
                name: '–ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä',
                displayName: '–ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä',
                description: '–ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä –¥–ª—è –ø–æ–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ä–∞–±–æ—Ç',
            },
        }),
        prisma.vehicleSubtype.upsert({
            where: { typeId_name: { typeId: specialType.id, name: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä' } },
            update: {},
            create: {
                typeId: specialType.id,
                name: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä',
                displayName: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä',
                description: '–≠–∫—Å–∫–∞–≤–∞—Ç–æ—Ä –¥–ª—è –∑–µ–º–ª—è–Ω—ã—Ö —Ä–∞–±–æ—Ç',
            },
        }),
    ]);
    console.log('‚úÖ Created vehicle catalog');
    console.log('Creating test users...');
    const testCustomer = await prisma.user.upsert({
        where: { telegramId: BigInt('123456789') },
        update: {},
        create: {
            telegramId: BigInt('123456789'),
            username: 'test_customer',
            firstName: '–ò–≤–∞–Ω',
            lastName: '–ò–≤–∞–Ω–æ–≤',
            role: client_1.RoleType.CUSTOMER,
            phone: '+79001234567',
            lastSeenAt: new Date(),
        },
    });
    const testExecutor = await prisma.user.upsert({
        where: { telegramId: BigInt('987654321') },
        update: {},
        create: {
            telegramId: BigInt('987654321'),
            username: 'test_executor',
            firstName: '–ü–µ—Ç—Ä',
            lastName: '–ü–µ—Ç—Ä–æ–≤',
            role: client_1.RoleType.EXECUTOR,
            phone: '+79007654321',
            lastSeenAt: new Date(),
        },
    });
    const testAdmin = await prisma.user.upsert({
        where: { telegramId: BigInt('555666777') },
        update: {},
        create: {
            telegramId: BigInt('555666777'),
            username: 'test_admin',
            firstName: '–ê–¥–º–∏–Ω',
            lastName: '–ê–¥–º–∏–Ω–æ–≤',
            role: client_1.RoleType.ADMIN,
            phone: '+79005556677',
            lastSeenAt: new Date(),
        },
    });
    console.log('‚úÖ Created test users');
    console.log('Creating user regions...');
    const moscowRegion = regions.find(r => r.code === 'MSK');
    if (moscowRegion && testExecutor) {
        await prisma.userRegion.upsert({
            where: { userId_regionId: { userId: testExecutor.id, regionId: moscowRegion.id } },
            update: {},
            create: {
                userId: testExecutor.id,
                regionId: moscowRegion.id,
                regionCode: moscowRegion.regionCode,
                planType: client_1.TariffType.OPTIMAL,
                paidUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
                activeSubRegions: ['–¶–µ–Ω—Ç—Ä', '–°–µ–≤–µ—Ä'],
            },
        });
    }
    console.log('‚úÖ Created user regions');
    console.log('üéâ Seed completed successfully!');
}
main()
    .catch((e) => {
    console.error('‚ùå Seed failed:', e);
    process.exit(1);
})
    .finally(async () => {
    await prisma.$disconnect();
});
//# sourceMappingURL=seed.js.map