import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Starting database seeding...')

  // Seed Vehicle Categories
  console.log('üì¶ Seeding vehicle categories...')
  const vehicleCategories = [
    {
      code: 'CAR',
      name: '–õ–µ–≥–∫–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å',
      description: '–û–±—ã—á–Ω—ã–µ –ª–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏'
    },
    {
      code: 'VAN',
      name: '–ú–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å/–§—É—Ä–≥–æ–Ω',
      description: '–ú–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å—ã –∏ —Ñ—É—Ä–≥–æ–Ω—ã'
    },
    {
      code: 'TRUCK_SMALL',
      name: '–ì—Ä—É–∑–æ–≤–∏–∫ –¥–æ 3.5—Ç',
      description: '–ú–∞–ª—ã–µ –≥—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏'
    },
    {
      code: 'TRUCK_MEDIUM',
      name: '–ì—Ä—É–∑–æ–≤–∏–∫ 3.5-10—Ç',
      description: '–°—Ä–µ–¥–Ω–∏–µ –≥—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏'
    },
    {
      code: 'TRUCK_LARGE',
      name: '–ì—Ä—É–∑–æ–≤–∏–∫ 10—Ç+',
      description: '–ë–æ–ª—å—à–∏–µ –≥—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏'
    },
    {
      code: 'SPECIAL',
      name: '–°–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞',
      description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞'
    }
  ]

  for (const category of vehicleCategories) {
    await prisma.vehicleCategory.upsert({
      where: { code: category.code },
      update: {},
      create: category
    })
  }

  // Seed Regions (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –†–æ—Å—Å–∏–∏)
  console.log('üó∫Ô∏è Seeding regions...')
  const regions = [
    {
      code: '77',
      name: '–ú–æ—Å–∫–≤–∞',
      level: 1,
      customerTariff: 70,
      performerTariff: 300,
      optimalTariff: 200
    },
    {
      code: '78',
      name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      level: 1,
      customerTariff: 70,
      performerTariff: 280,
      optimalTariff: 190
    },
    {
      code: '33',
      name: '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      level: 1,
      customerTariff: 70,
      performerTariff: 250,
      optimalTariff: 170
    },
    {
      code: '23',
      name: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π',
      level: 1,
      customerTariff: 70,
      performerTariff: 350,
      optimalTariff: 220
    },
    {
      code: '50',
      name: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      level: 1,
      customerTariff: 70,
      performerTariff: 270,
      optimalTariff: 180
    },
    {
      code: '47',
      name: '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      level: 1,
      customerTariff: 70,
      performerTariff: 260,
      optimalTariff: 175
    },
    {
      code: '61',
      name: '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      level: 1,
      customerTariff: 70,
      performerTariff: 240,
      optimalTariff: 165
    },
    {
      code: '63',
      name: '–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      level: 1,
      customerTariff: 70,
      performerTariff: 230,
      optimalTariff: 160
    },
    {
      code: '66',
      name: '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      level: 1,
      customerTariff: 70,
      performerTariff: 220,
      optimalTariff: 155
    },
    {
      code: '74',
      name: '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      level: 1,
      customerTariff: 70,
      performerTariff: 210,
      optimalTariff: 150
    }
  ]

  for (const region of regions) {
    await prisma.region.upsert({
      where: { code: region.code },
      update: {},
      create: region
    })
  }

  // Seed some subregions for Moscow
  console.log('üèôÔ∏è Seeding Moscow subregions...')
  const moscowSubregions = [
    {
      code: '77_01',
      name: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥',
      parentCode: '77',
      level: 2,
      customerTariff: 70,
      performerTariff: 300,
      optimalTariff: 200
    },
    {
      code: '77_02',
      name: '–°–µ–≤–µ—Ä–Ω—ã–π –æ–∫—Ä—É–≥',
      parentCode: '77',
      level: 2,
      customerTariff: 70,
      performerTariff: 300,
      optimalTariff: 200
    },
    {
      code: '77_03',
      name: '–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π –æ–∫—Ä—É–≥',
      parentCode: '77',
      level: 2,
      customerTariff: 70,
      performerTariff: 300,
      optimalTariff: 200
    },
    {
      code: '77_04',
      name: '–í–æ—Å—Ç–æ—á–Ω—ã–π –æ–∫—Ä—É–≥',
      parentCode: '77',
      level: 2,
      customerTariff: 70,
      performerTariff: 300,
      optimalTariff: 200
    },
    {
      code: '77_05',
      name: '–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π –æ–∫—Ä—É–≥',
      parentCode: '77',
      level: 2,
      customerTariff: 70,
      performerTariff: 300,
      optimalTariff: 200
    }
  ]

  for (const subregion of moscowSubregions) {
    await prisma.region.upsert({
      where: { code: subregion.code },
      update: {},
      create: subregion
    })
  }

  // Seed System Settings
  console.log('‚öôÔ∏è Seeding system settings...')
  const systemSettings = [
    {
      key: 'APP_VERSION',
      value: '1.0.0',
      description: 'Current application version'
    },
    {
      key: 'MAINTENANCE_MODE',
      value: 'false',
      description: 'Maintenance mode flag'
    },
    {
      key: 'DEFAULT_CUSTOMER_TARIFF',
      value: '70',
      description: 'Default tariff for customers'
    },
    {
      key: 'DEFAULT_PERFORMER_TARIFF',
      value: '200',
      description: 'Default tariff for performers'
    },
    {
      key: 'MAX_ORDERS_PER_USER',
      value: '5',
      description: 'Maximum active orders per user'
    },
    {
      key: 'SESSION_TTL_HOURS',
      value: '24',
      description: 'Session TTL in hours'
    },
    {
      key: 'NOTIFICATION_QUEUE_SIZE',
      value: '1000',
      description: 'Maximum notification queue size'
    }
  ]

  for (const setting of systemSettings) {
    await prisma.systemSetting.upsert({
      where: { key: setting.key },
      update: { value: setting.value },
      create: setting
    })
  }

  console.log('‚úÖ Database seeding completed successfully!')
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error('‚ùå Error during seeding:', e)
    await prisma.$disconnect()
    process.exit(1)
  }) 