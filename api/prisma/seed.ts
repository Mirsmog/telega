import { PrismaClient, RoleType, TariffType } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Starting seed...');

  // Create regions with tariffs
  console.log('Creating regions...');
  const regions = await Promise.all([
    prisma.region.upsert({
      where: { code: 'MSK' },
      update: {},
      create: {
        name: '–ú–æ—Å–∫–≤–∞',
        code: 'MSK',
        oneTimeTariff: 350.00,
        optimalTariff: 2500.00,
      },
    }),
    prisma.region.upsert({
      where: { code: 'SPB' },
      update: {},
      create: {
        name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        code: 'SPB',
        oneTimeTariff: 300.00,
        optimalTariff: 2200.00,
      },
    }),
    prisma.region.upsert({
      where: { code: 'EKB' },
      update: {},
      create: {
        name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
        code: 'EKB',
        oneTimeTariff: 250.00,
        optimalTariff: 1800.00,
      },
    }),
    prisma.region.upsert({
      where: { code: 'NSK' },
      update: {},
      create: {
        name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
        code: 'NSK',
        oneTimeTariff: 230.00,
        optimalTariff: 1600.00,
      },
    }),
    prisma.region.upsert({
      where: { code: 'KZN' },
      update: {},
      create: {
        name: '–ö–∞–∑–∞–Ω—å',
        code: 'KZN',
        oneTimeTariff: 220.00,
        optimalTariff: 1500.00,
      },
    }),
    prisma.region.upsert({
      where: { code: 'RND' },
      update: {},
      create: {
        name: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É',
        code: 'RND',
        oneTimeTariff: 200.00,
        optimalTariff: 1400.00,
      },
    }),
  ]);

  console.log(`‚úÖ Created ${regions.length} regions`);

  // Create vehicle categories, types, and subtypes
  console.log('Creating vehicle catalog...');

  // –õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
  const carCategory = await prisma.vehicleCategory.upsert({
    where: { name: '–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏' },
    update: {},
    create: {
      name: '–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏',
      description: '–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –ª—é–¥–µ–π',
    },
  });

  const carType = await prisma.vehicleType.upsert({
    where: { categoryId_name: { categoryId: carCategory.id, name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç' } },
    update: {},
    create: {
      categoryId: carCategory.id,
      name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç',
      description: '–û–±—ã—á–Ω—ã–µ –ª–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏',
    },
  });

  await Promise.all([
    prisma.vehicleSubtype.upsert({
      where: { typeId_name: { typeId: carType.id, name: '–°–µ–¥–∞–Ω' } },
      update: {},
      create: {
        typeId: carType.id,
        name: '–°–µ–¥–∞–Ω',
        description: '–°–µ–¥–∞–Ω (4 –º–µ—Å—Ç–∞)',
      },
    }),
    prisma.vehicleSubtype.upsert({
      where: { typeId_name: { typeId: carType.id, name: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª' } },
      update: {},
      create: {
        typeId: carType.id,
        name: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª',
        description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª (5 –º–µ—Å—Ç)',
      },
    }),
    prisma.vehicleSubtype.upsert({
      where: { typeId_name: { typeId: carType.id, name: '–ú–∏–Ω–∏–≤—ç–Ω' } },
      update: {},
      create: {
        typeId: carType.id,
        name: '–ú–∏–Ω–∏–≤—ç–Ω',
        description: '–ú–∏–Ω–∏–≤—ç–Ω (7-8 –º–µ—Å—Ç)',
      },
    }),
  ]);

  // –ì—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
  const truckCategory = await prisma.vehicleCategory.upsert({
    where: { name: '–ì—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏' },
    update: {},
    create: {
      name: '–ì—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏',
      description: '–ì—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –≥—Ä—É–∑–æ–≤',
    },
  });

  const lightTruckType = await prisma.vehicleType.upsert({
    where: { categoryId_name: { categoryId: truckCategory.id, name: '–õ–µ–≥–∫–∏–µ –≥—Ä—É–∑–æ–≤–∏–∫–∏' } },
    update: {},
    create: {
      categoryId: truckCategory.id,
      name: '–õ–µ–≥–∫–∏–µ –≥—Ä—É–∑–æ–≤–∏–∫–∏',
      description: '–ì—Ä—É–∑–æ–≤–∏–∫–∏ –¥–æ 3.5 —Ç–æ–Ω–Ω',
    },
  });

  const mediumTruckType = await prisma.vehicleType.upsert({
    where: { categoryId_name: { categoryId: truckCategory.id, name: '–°—Ä–µ–¥–Ω–∏–µ –≥—Ä—É–∑–æ–≤–∏–∫–∏' } },
    update: {},
    create: {
      categoryId: truckCategory.id,
      name: '–°—Ä–µ–¥–Ω–∏–µ –≥—Ä—É–∑–æ–≤–∏–∫–∏',
      description: '–ì—Ä—É–∑–æ–≤–∏–∫–∏ –æ—Ç 3.5 –¥–æ 12 —Ç–æ–Ω–Ω',
    },
  });

  await Promise.all([
    // –õ–µ–≥–∫–∏–µ –≥—Ä—É–∑–æ–≤–∏–∫–∏
    prisma.vehicleSubtype.upsert({
      where: { typeId_name: { typeId: lightTruckType.id, name: '–ì–∞–∑–µ–ª—å' } },
      update: {},
      create: {
        typeId: lightTruckType.id,
        name: '–ì–∞–∑–µ–ª—å',
        description: '–ì–ê–ó–µ–ª—å –∏ –∞–Ω–∞–ª–æ–≥–∏ (–¥–æ 1.5 —Ç–æ–Ω–Ω)',
      },
    }),
    prisma.vehicleSubtype.upsert({
      where: { typeId_name: { typeId: lightTruckType.id, name: '–ë—ã—á–æ–∫' } },
      update: {},
      create: {
        typeId: lightTruckType.id,
        name: '–ë—ã—á–æ–∫',
        description: '–ú–∞–ª—ã–π –≥—Ä—É–∑–æ–≤–∏–∫ (–¥–æ 3 —Ç–æ–Ω–Ω)',
      },
    }),
    // –°—Ä–µ–¥–Ω–∏–µ –≥—Ä—É–∑–æ–≤–∏–∫–∏
    prisma.vehicleSubtype.upsert({
      where: { typeId_name: { typeId: mediumTruckType.id, name: '–°—Ä–µ–¥–Ω–∏–π –≥—Ä—É–∑–æ–≤–∏–∫' } },
      update: {},
      create: {
        typeId: mediumTruckType.id,
        name: '–°—Ä–µ–¥–Ω–∏–π –≥—Ä—É–∑–æ–≤–∏–∫',
        description: '–ì—Ä—É–∑–æ–≤–∏–∫ 5-10 —Ç–æ–Ω–Ω',
      },
    }),
    prisma.vehicleSubtype.upsert({
      where: { typeId_name: { typeId: mediumTruckType.id, name: '–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä' } },
      update: {},
      create: {
        typeId: mediumTruckType.id,
        name: '–†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä',
        description: '–ì—Ä—É–∑–æ–≤–∏–∫ —Å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π',
      },
    }),
  ]);

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞
  const specialCategory = await prisma.vehicleCategory.upsert({
    where: { name: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞' },
    update: {},
    create: {
      name: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
      description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
    },
  });

  const specialType = await prisma.vehicleType.upsert({
    where: { categoryId_name: { categoryId: specialCategory.id, name: '–ü–æ–≥—Ä—É–∑–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞' } },
    update: {},
    create: {
      categoryId: specialCategory.id,
      name: '–ü–æ–≥—Ä—É–∑–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
      description: '–¢–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –ø–æ–≥—Ä—É–∑–æ-—Ä–∞–∑–≥—Ä—É–∑–æ—á–Ω—ã—Ö —Ä–∞–±–æ—Ç',
    },
  });

  await Promise.all([
    prisma.vehicleSubtype.upsert({
      where: { typeId_name: { typeId: specialType.id, name: '–ö—Ä–∞–Ω' } },
      update: {},
      create: {
        typeId: specialType.id,
        name: '–ö—Ä–∞–Ω',
        description: '–ê–≤—Ç–æ–∫—Ä–∞–Ω —Ä–∞–∑–ª–∏—á–Ω–æ–π –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç–∏',
      },
    }),
    prisma.vehicleSubtype.upsert({
      where: { typeId_name: { typeId: specialType.id, name: '–≠–≤–∞–∫—É–∞—Ç–æ—Ä' } },
      update: {},
      create: {
        typeId: specialType.id,
        name: '–≠–≤–∞–∫—É–∞—Ç–æ—Ä',
        description: '–≠–≤–∞–∫—É–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π',
      },
    }),
  ]);

  console.log('‚úÖ Created vehicle catalog');

  // Create admin user
  console.log('Creating admin user...');
  const adminUser = await prisma.user.upsert({
    where: { telegramId: BigInt(123456789) },
    update: {},
    create: {
      telegramId: BigInt(123456789),
      username: 'admin',
      firstName: 'System',
      lastName: 'Administrator',
      role: RoleType.ADMIN,
      referralCode: 'ADMIN001',
      balance: 0,
      frozenBalance: 0,
    },
  });

  console.log(`‚úÖ Created admin user: ${adminUser.firstName} ${adminUser.lastName}`);

  // Create test customer
  console.log('Creating test customer...');
  const customerUser = await prisma.user.upsert({
    where: { telegramId: BigInt(987654321) },
    update: {},
    create: {
      telegramId: BigInt(987654321),
      username: 'testcustomer',
      firstName: '–¢–µ—Å—Ç',
      lastName: '–ó–∞–∫–∞–∑—á–∏–∫',
      role: RoleType.CUSTOMER,
      referralCode: 'CUST001',
      balance: 1000.00,
      frozenBalance: 0,
    },
  });

  console.log(`‚úÖ Created test customer: ${customerUser.firstName} ${customerUser.lastName}`);

  // Create test executor
  console.log('Creating test executor...');
  const executorUser = await prisma.user.upsert({
    where: { telegramId: BigInt(456789123) },
    update: {},
    create: {
      telegramId: BigInt(456789123),
      username: 'testexecutor',
      firstName: '–¢–µ—Å—Ç',
      lastName: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
      role: RoleType.EXECUTOR,
      referralCode: 'EXEC001',
      balance: 500.00,
      frozenBalance: 0,
    },
  });

  // Add test executor to Moscow region
  await prisma.userRegion.upsert({
    where: { userId_regionId: { userId: executorUser.id, regionId: regions[0].id } },
    update: {},
    create: {
      userId: executorUser.id,
      regionId: regions[0].id,
      tariffType: TariffType.OPTIMAL,
      paidUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now
    },
  });

  console.log(`‚úÖ Created test executor: ${executorUser.firstName} ${executorUser.lastName}`);

  // Create some basic configuration
  console.log('Creating basic configuration...');
  await Promise.all([
    prisma.config.upsert({
      where: { key: 'ORDER_PLACEMENT_FEE' },
      update: {},
      create: {
        key: 'ORDER_PLACEMENT_FEE',
        value: '70.00',
        description: '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤',
      },
    }),
    prisma.config.upsert({
      where: { key: 'REFERRAL_BONUS' },
      update: {},
      create: {
        key: 'REFERRAL_BONUS',
        value: '50.00',
        description: '–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      },
    }),
    prisma.config.upsert({
      where: { key: 'MIN_WITHDRAWAL_AMOUNT' },
      update: {},
      create: {
        key: 'MIN_WITHDRAWAL_AMOUNT',
        value: '100.00',
        description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤',
      },
    }),
    prisma.config.upsert({
      where: { key: 'SYSTEM_COMMISSION' },
      update: {},
      create: {
        key: 'SYSTEM_COMMISSION',
        value: '5.00',
        description: '–ö–æ–º–∏—Å—Å–∏—è —Å–∏—Å—Ç–µ–º—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö',
      },
    }),
  ]);

  console.log('‚úÖ Created basic configuration');

  console.log('üéâ Seed completed successfully!');
}

main()
  .catch(e => {
    console.error('‚ùå Seed failed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  }); 