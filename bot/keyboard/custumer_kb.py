from packages.bot.create_bot import InlineKeyboardButton, InlineKeyboardMarkup
from packages.bot.middlewares import tinkof_pay


def custumer_main(url):
    kb_1 = InlineKeyboardButton("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", callback_data="customer_order")
    kb_2 = InlineKeyboardButton("–ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="customer_bid")
    kb_3 = InlineKeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="customer_profile")
    kb_7 = InlineKeyboardButton("–ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="customer_balance")
    kb_4 = InlineKeyboardButton("–í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url=url)
    kb_5 = InlineKeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="customer_feedback")
    kb_6 = InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", callback_data="customer_link")
    re_kb = InlineKeyboardMarkup()
    re_kb.add(kb_1, kb_2)
    re_kb.add(kb_3, kb_7)
    re_kb.add(kb_4, kb_5)
    re_kb.add(kb_6)
    return re_kb


def menu():
    kb = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start_command")
    re_kb = InlineKeyboardMarkup()
    re_kb.add(kb)
    return re_kb


def all_bid(orders, page=1, max_buttons_in_row=2, orders_per_page=12):
    excluded_statuses = ["finish", "im_cancel", "canceled", "pf_cancel"]
    filtered_orders = [order for order in orders if order["status"] not in excluded_statuses]

    # –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    start_index = (page - 1) * orders_per_page
    end_index = start_index + orders_per_page

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page_orders = filtered_orders[start_index:end_index]

    keyboard = InlineKeyboardMarkup(row_width=max_buttons_in_row)

    for order in page_orders:
        status_emoji = {
            "wait": "üü†",
            "canceled": "‚õîÔ∏è",
            "search": "üåÄ",
            "create": "‚è≥",
            "im_cancel": "‚ùå",
            "in_work": "‚úÖ",
        }

        button_text = f"–ó–∞—è–≤–∫–∞ #{order['order_number']} {status_emoji.get(order['status'], '')}"

        callback_data = f"cusmyorder:{str(order['_id'])}"

        keyboard.insert(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"cuspage:{page - 1}"))

    if end_index < len(filtered_orders):
        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"cuspage:{page + 1}"))

    keyboard.row(*nav_buttons)
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start_command"))

    return keyboard


def order_menu(call):
    obj = call.split(":")[1]
    kb_1 = InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"ordmen_cancel_{obj}")
    # –Ω–µ –±—ã–ª–æ –≤ –¢–ó —Ä–µ—à–∏–ª –Ω–µ –¥–µ–ª–∞—Ç—å(–ø–æ—Ç–æ–º—É —á—Ç–æ –º–Ω–æ–≥–æ –ª–∏—à–Ω–µ–≥–æ –∫–æ–¥–∞
    kb_3 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="customer_bid")
    keyboard = InlineKeyboardMarkup()
    keyboard.add(kb_1)
    keyboard.add(kb_3)
    return keyboard


def order_menu_work(call):
    obj = call.split(":")[1]
    kb_0 = InlineKeyboardButton("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"ordmen_fin_{obj}")
    kb_1 = InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"ordmen_cancel_{obj}")
    kb_2 = InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É", callback_data=f"ordmen_report_{obj}")
    kb_3 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="customer_bid")
    keyboard = InlineKeyboardMarkup()
    keyboard.add(kb_0)
    keyboard.add(kb_1)
    keyboard.add(kb_2)
    keyboard.add(kb_3)
    return keyboard


def order_new(user_id, car, obj, pos):
    kb_1 = InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"pt:{user_id}:{car}:{obj}")
    kb_2 = InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"dont:{user_id}:{obj}")
    re_kb = InlineKeyboardMarkup()
    re_kb.add(kb_1)
    re_kb.add(kb_2)
    return re_kb


def how_car(need_car, obj):
    keyboard = InlineKeyboardMarkup()
    for i in range(need_car - 1, 0, -1):
        print(i)
        button_text = str(i)
        callback_data = f"mocar:{str(i)}:{obj}"

        keyboard.add(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    kb_3 = InlineKeyboardButton("–ë–æ–ª—å—à–µ –Ω–µ –∏—Å–∫–∞—Ç—å", callback_data=f"mocar:stop:{obj}")
    keyboard.add(kb_3)
    return keyboard


async def pay_70(user_id):
    response = await tinkof_pay.get_url(99, user_id)
    kb_1 = InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 99—Ä –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É", url=response)
    kb_2 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start_command")
    re_kb = InlineKeyboardMarkup()
    re_kb.add(kb_1)
    re_kb.add(kb_2)
    return re_kb


def acept_price(manage_obj, pos):
    kb_1 = InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=f"jk:{manage_obj}:{pos}")
    kb_2 = InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="jk:del:1")
    re_kb = InlineKeyboardMarkup()
    re_kb.add(kb_1)
    re_kb.add(kb_2)
    return re_kb
