from packages.bot.create_bot import InlineKeyboardMarkup, InlineKeyboardButton, bot
from packages.bot.database import performer_db
from packages.bot.middlewares import tinkof_pay


def performer_main(url):
    kb_1 = InlineKeyboardButton("–ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="performer_order")
    kb_2 = InlineKeyboardButton("–ú–æ—è —Ç–µ—Ö–Ω–∏–∫–∞", callback_data="performer_tech")
    kb_3 = InlineKeyboardButton("–†–µ–≥–∏–æ–Ω(—ã) –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫", callback_data="performer_region")
    kb_4 = InlineKeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="performer_profile")
    kb_5 = InlineKeyboardButton("–ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="performer_balance")
    kb_6 = InlineKeyboardButton("–¢–∞—Ä–∏—Ñ—ã", callback_data="performer_tariff")
    kb_7 = InlineKeyboardButton("–í–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url=url)
    kb_8 = InlineKeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="performer_feedback")
    kb_9 = InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", callback_data="performer_link")
    re_kb = InlineKeyboardMarkup()
    re_kb.add(kb_1, kb_2)
    re_kb.add(kb_3)
    re_kb.add(kb_4, kb_5)
    re_kb.add(kb_6, kb_7)

    re_kb.add(kb_8)
    re_kb.add(kb_9)
    return re_kb


def per_tech(user_info):
    re_kb = InlineKeyboardMarkup(row_width=1)
    for i in user_info:
        car_type = user_info[i]["data"][2]
        car_name = user_info[i]["data"][0]
        car_number = user_info[i]["data"][1]
        if user_info[i]["status"] == "search":
            button = InlineKeyboardButton(
                f"üü¢ {car_type}: {car_name} - {car_number}", callback_data=f'percarteg:{i}:{user_info[i]["status"]}'
            )
            re_kb.insert(button)
        elif user_info[i]["status"] == "stop":
            button = InlineKeyboardButton(
                f"üî¥ {car_type}: {car_name} - {car_number}", callback_data=f'percarteg:{i}:{user_info[i]["status"]}'
            )
            re_kb.insert(button)
        elif user_info[i]["status"] == "work" or user_info[i]["status"] == "in_work":
            button = InlineKeyboardButton(
                f"üü° {car_type}: {car_name} - {car_number}", callback_data=f'percarteg:{i}:{user_info[i]["status"]}'
            )
            re_kb.insert(button)

    kb_2 = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—É —Ç–µ—Ö–Ω–∏–∫–∏", callback_data="registernewcar")
    kb_1 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start_command")
    re_kb.add(kb_2)
    re_kb.add(kb_1)
    return re_kb


def info_for_car():
    return InlineKeyboardMarkup().add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="performer_tech"))


def process_del(car):
    kb_1 = InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"deletecar:{car}")
    kb_2 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="performer_tech")
    re_kb = InlineKeyboardMarkup()
    re_kb.add(kb_1)
    re_kb.add(kb_2)
    return re_kb


def add_car(result):
    keyboard = InlineKeyboardMarkup(row_width=1)
    for i in result:
        button_text = i["category_name"]
        callback_data = i["_id"]
        keyboard.add(InlineKeyboardButton(text=button_text, callback_data=f"cardscate:{callback_data}"))
    keyboard.insert(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="performer_tech"))

    return keyboard


def add_types_car(result, call):
    keyboard = InlineKeyboardMarkup(row_width=1)
    for i in result:
        button_text = i["type_name"]
        callback_data = i["_id"]
        keyboard.add(InlineKeyboardButton(text=button_text, callback_data=f"cardstype:{callback_data}"))
    keyboard.insert(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"performer_tech"))

    return keyboard


def add_podtypes_car(result, call):
    keyboard = InlineKeyboardMarkup(row_width=1)
    for i in result:
        button_text = i["pod_type_name"]
        callback_data = i["_id"]
        keyboard.add(InlineKeyboardButton(text=button_text, callback_data=f"cardspodtype:{callback_data}"))
    keyboard.insert(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"performer_tech"))

    return keyboard


def amount_car():
    keyboard = InlineKeyboardMarkup(row_width=4)
    for i in range(1, 10):
        button_text = i
        keyboard.insert(InlineKeyboardButton(text=str(button_text), callback_data=f"amountcar:{i}"))
    keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"performer_tech"))

    return keyboard


def about_car(car, status):
    kb_1 = InlineKeyboardButton("–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫", callback_data=f"carproces:{car}:stop")
    kb_4 = InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫", callback_data=f"carproces:{car}:search")
    kb_2 = InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—É —Ç–µ—Ö–Ω–∏–∫–∏", callback_data=f"carproces:{car}:delete")
    kb_3 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="performer_tech")
    re_kb = InlineKeyboardMarkup()
    if status == "search":
        re_kb.add(kb_1)
    elif status == "stop":
        re_kb.add(kb_4)
    re_kb.add(kb_2)
    re_kb.add(kb_3)
    return re_kb


def region_editor():
    kb_1 = InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω", callback_data="deletereg")
    kb_2 = InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏", callback_data="performer_editregions")
    kb_3 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start_command")
    re_kb = InlineKeyboardMarkup()
    re_kb.add(kb_1)
    re_kb.add(kb_2)
    re_kb.add(kb_3)
    return re_kb


def delete_region(user_info, page=1, max_buttons_in_row=8, regions_per_page=48):
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    start_index = (page - 1) * regions_per_page
    end_index = start_index + regions_per_page

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ, –≥–¥–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω True
    user_regions = {k: v for k, v in user_info.items() if "subreg" in v and any(v["subreg"].values())}

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    region_keys = list(user_regions.keys())[start_index:end_index]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    re_kb = InlineKeyboardMarkup(row_width=max_buttons_in_row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
    for region_code in region_keys:
        button = InlineKeyboardButton(region_code, callback_data=f"delreg_{region_code}")
        re_kb.insert(button)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"page_{page - 1}"))

    if end_index < len(user_regions):
        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"page_{page + 1}"))
    kb_1 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="performer_region")
    re_kb.add(kb_1)
    re_kb.row(*nav_buttons)

    return re_kb


def region_pre(regions, page=1, max_buttons_in_row=8, regions_per_page=46):
    start_index = (int(page) - 1) * regions_per_page
    end_index = start_index + regions_per_page

    region_keys = list(regions.keys())[start_index:end_index]  # –û–±—Ä–µ–∑–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ –Ω—É–∂–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞

    re_kb = InlineKeyboardMarkup(row_width=max_buttons_in_row)

    for region_code in region_keys:  # –¢–µ–ø–µ—Ä—å –∏—Ç–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ –Ω—É–∂–Ω–æ–π —á–∞—Å—Ç–∏ —Å–ø–∏—Å–∫–∞
        button = InlineKeyboardButton(region_code, callback_data=f"prereg_{region_code}")
        re_kb.insert(button)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"page_{int(page) - 1}"))

    if end_index < len(regions.keys()):
        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"page_{int(page) + 1}"))

    re_kb.row(*nav_buttons)
    kb_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="performer_region")
    re_kb.add(kb_back)

    return re_kb


async def subtype_pre(user_id, region_code_data=None, regi=None, page=1, max_buttons_in_row=2, subtypes_per_page=12):
    start_index = (int(page) - 1) * subtypes_per_page
    end_index = start_index + subtypes_per_page

    try:
        if region_code_data is None:
            region_code = regi
        elif region_code_data.isdigit():
            region_code = region_code_data
        else:
            region_code = region_code_data.split("_")[1]
    except:
        region_code = regi

    # –ó–¥–µ—Å—å –º—ã –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–≥–∏–æ–Ω–µ –∏–∑ MongoDB
    region_data = await performer_db.find_region(user_id)
    if region_data is None:
        return None  # –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —ç—Ç–æ –∫–∞–∫ –æ—à–∏–±–∫—É

    subtypes = region_data["all_regions"][region_code]["subreg"]

    subtype_keys = list(subtypes.keys())[start_index:end_index]

    re_kb = InlineKeyboardMarkup(row_width=max_buttons_in_row)

    for index, subty_name in enumerate(subtype_keys):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ MongoDB
        button_state = region_data["all_regions"][region_code]["subreg"][subty_name]
        if button_state:
            subty_name = "‚úÖ" + subty_name

        button = InlineKeyboardButton(subty_name, callback_data=f"subpreg_{index}:{region_code_data}:{page}")
        re_kb.insert(button)
    # print(re_kb)

    nav_buttons = []
    if int(page) > 1:
        nav_buttons.append(
            InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"pafe:{int(page) - 1}@{region_code_data}")
        )
    if end_index < len(subtypes):
        nav_buttons.append(
            InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"pafe:{int(page) + 1}@{region_code_data}")
        )
    kb_1 = InlineKeyboardButton("–í—Å–µ —Ä–∞–π–æ–Ω—ã", callback_data=f"subpreg_1:{region_code_data}:{page}:all")
    kb_2 = InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="performer_region")
    re_kb.row(*nav_buttons)
    re_kb.add(kb_1, kb_2)
    kb_back = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="performer_region")
    re_kb.add(kb_back)

    return re_kb


async def on_button_click(user_id: int, region_code: str, message_id: int, subtype_id: str, page):
    # –ò—â–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ MongoDB
    await performer_db.find_button(user_id, subtype_id, region_code)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏

    new_keyboard = await subtype_pre(
        user_id, region_code, regi=region_code, page=page
    )  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è subtype_pre, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.edit_message_reply_markup(chat_id=user_id, message_id=message_id, reply_markup=new_keyboard)


def menu_perfomer_profile():
    kb = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start_command")
    re_kb = InlineKeyboardMarkup()
    re_kb.add(kb)
    return re_kb


def menu_perfomer_balance():
    kb_1 = InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="payz_now")
    kb = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start_command")
    re_kb = InlineKeyboardMarkup()
    re_kb.add(kb_1)
    re_kb.add(kb)
    return re_kb


def pay(amount):
    kb_1 = InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {amount}, –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫—É", url="https://google.com")
    return InlineKeyboardMarkup(kb_1)


def fats_buy(tarif):
    kb_1 = InlineKeyboardButton(f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ {tarif} —Ä.", callback_data=f"payz_{tarif}")
    kb_2 = InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="payz_now")
    kb_3 = InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_command")
    re_kb = InlineKeyboardMarkup()
    re_kb.add(kb_1)
    re_kb.add(kb_2)
    re_kb.add(kb_3)
    return re_kb


async def pay_now(amount=None, who=None, user_id=None):

    kb_1 = InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 500 —Ä—É–±–ª–µ–π", callback_data="payz_500")
    kb_2 = InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 1000 —Ä—É–±–ª–µ–π", callback_data="payz_1000")
    kb_3 = InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 2000 —Ä—É–±–ª–µ–π", callback_data="payz_2000")
    kb_4 = InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 5000 —Ä—É–±–ª–µ–π", callback_data="payz_5000")
    kb_5 = InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 10000 —Ä—É–±–ª–µ–π", callback_data="payz_10000")
    kb_6 = InlineKeyboardButton("–¢–∞—Ä–∏—Ñ—ã", callback_data="tariff")
    kb_7 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="customer_balance")
    kb_8 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="performer_balance")
    re_kb = InlineKeyboardMarkup()
    if amount == None:
        re_kb.add(kb_1)
        re_kb.add(kb_2)
        re_kb.add(kb_3)
        re_kb.add(kb_4)
        re_kb.add(kb_5)
        re_kb.add(kb_6)
    else:
        # TODO: k–æ–≥–∏–∫—É –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –ª—É—á—à–µ –∏ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –≤—ã—Å—Ä–∞—Ç—å —Ä–∞–∑–Ω—É—é –∫–Ω–æ–ø–∫—É
        response = await tinkof_pay.get_url(amount, user_id)
        if response is not None:
            print(response)
            # —Ç—É—Ç –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –∫–æ–Ω–µ–∫—Ç –∫ tinkoff api
            kb_11 = InlineKeyboardButton(f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ {str(amount)}", url=response)
        else:
            kb_11 = InlineKeyboardButton(
                f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ {amount}, –µ—â–µ —Ä–∞–∑(—Å—Å—ã–ª–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞)", callback_data=f"payz_{str(amount)}"
            )
        re_kb.add(kb_11)

    if who == 1:
        re_kb.add(kb_8)
    else:
        re_kb.add(kb_7)
    print(re_kb)
    return re_kb


def take_order(obj):
    kb_1 = InlineKeyboardButton("–í—ã–∫—É–ø–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"takeorder:buy:{obj}")
    kb_2 = InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data=f"takeorder:pri:{obj}")
    kb_3 = InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data=f"takeorder:dat:{obj}")
    re_kb = InlineKeyboardMarkup()
    re_kb.add(kb_1)
    re_kb.add(kb_2)
    re_kb.add(kb_3)
    return re_kb


def buy_order(cars, user_info, obj):
    re_kb = InlineKeyboardMarkup(row_width=1)
    for i in cars:

        car_type = user_info["cars"][i]["data"][2]
        car_name = user_info["cars"][i]["data"][0]
        car_number = user_info["cars"][i]["data"][1]
        if user_info["cars"][i]["status"] == "search":

            button = InlineKeyboardButton(
                f"üü¢ {car_type}: {car_name} - {car_number}", callback_data=f"ordbyu:{i}:{obj}"
            )

            re_kb.insert(button)

    kb_1 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start_command")
    re_kb.add(kb_1)

    return re_kb


def order_menu(call):
    obj = call.split(":")[1]
    kb_1 = InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"ordper_cancel_{obj}")
    # –Ω–µ –±—ã–ª–æ –≤ –¢–ó —Ä–µ—à–∏–ª –Ω–µ –¥–µ–ª–∞—Ç—å(–ø–æ—Ç–æ–º—É —á—Ç–æ –º–Ω–æ–≥–æ –ª–∏—à–Ω–µ–≥–æ –∫–æ–¥–∞
    kb_3 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="performer_order")
    keyboard = InlineKeyboardMarkup()
    keyboard.add(kb_1)
    keyboard.add(kb_3)
    return keyboard


def all_bid(orders, page=1, max_buttons_in_row=2, orders_per_page=12):
    excluded_statuses = ["finish", "im_cancel", "canceled"]
    filtered_orders = [order for order in orders if order["status"] not in excluded_statuses]

    # –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    start_index = (page - 1) * orders_per_page
    end_index = start_index + orders_per_page
    print(filtered_orders)
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page_orders = filtered_orders[start_index:end_index]

    keyboard = InlineKeyboardMarkup(row_width=max_buttons_in_row)

    for order in page_orders:
        status_emoji = {
            "wait": "üü†",
            "canceled": "‚õîÔ∏è",
            "search": "üåÄ",
            "create": "‚è≥",
            "im_cancel": "‚ùå",
            "in_work": "‚úÖ",
            "work": "‚úÖ",
        }

        button_text = f"–ó–∞—è–≤–∫–∞ #{order['order_number']} {status_emoji.get(order['status'], '')}"

        callback_data = f"perforder:{str(order['_id'])}"

        keyboard.insert(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"perpage:{page - 1}"))

    if end_index < len(filtered_orders):
        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"perpage:{page + 1}"))

    keyboard.row(*nav_buttons)
    keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start_command"))

    return keyboard


def per_tarif():
    kb_1 = InlineKeyboardButton("–ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="performer_balance")
    kb_2 = InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="payz_now")
    kb_3 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="start_command")
    re_kb = InlineKeyboardMarkup()
    re_kb.add(kb_1)
    re_kb.add(kb_2)
    re_kb.add(kb_3)
    return re_kb


def order_menu_work(call, swap):
    obj = call.split(":")[1]
    kb_1 = InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"ordper_cancel_{obj}")
    kb_2 = InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É", callback_data=f"ordper_report_{obj}")
    kb_5 = InlineKeyboardButton("–ó–∞–º–µ–Ω–∏—Ç—å –º–∞—à–∏–Ω—É", callback_data=f"ordper_swap_{obj}")
    kb_3 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="performer_order")
    keyboard = InlineKeyboardMarkup()
    keyboard.add(kb_1)
    keyboard.add(kb_2)
    if swap:
        keyboard.add(kb_5)
    keyboard.add(kb_3)
    return keyboard


def ok_car():
    kb_1 = InlineKeyboardButton("–ü–æ–Ω—è—Ç–Ω–æ", callback_data="cardontok")
    return InlineKeyboardMarkup().add(kb_1)


def change_car(free_car, cars_performer, obj):
    keyboar = InlineKeyboardMarkup(row_width=1)
    for car in free_car:
        data_car = cars_performer[car]["data"]
        text = f"üü¢{data_car[2]}: {data_car[0]} - {data_car[1]}"
        call_data = f"chca:{car}:{obj}"
        keyboar.insert(InlineKeyboardButton(text=text, callback_data=call_data))
    kb_3 = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"perforder:{obj}")
    keyboar.add(kb_3)
    return keyboar


def get_car(cars):
    print(cars)
    keyboard = InlineKeyboardMarkup(row_width=1)
    for car in cars:
        print(list(car.keys()))
        car_info = car[list(car.keys())[0]]["data"]
        text = f"{car_info[0]} - {car_info[1]}"
        call_data = f"khg:{list(car.keys())[0]}"
        keyboard.insert(InlineKeyboardButton(text=text, callback_data=call_data))
    return keyboard
